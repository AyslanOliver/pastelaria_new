{
  "version": 3,
  "sources": ["../bundle-m30Ttn/checked-fetch.js", "../../../node_modules/itty-router/index.mjs", "../../../src/utils/cors.js", "../../../src/middleware/auth.js", "../../../src/middleware/validation.js", "../../../src/utils/cache.js", "../../../src/utils/mobile-optimization.js", "../../../src/routes/produtos.js", "../../../src/routes/sabores.js", "../../../src/routes/tamanhos.js", "../../../src/routes/pedidos.js", "../../../src/routes/sync.js", "../../../src/index.js", "file:///C:/Users/Ayslan/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "file:///C:/Users/Ayslan/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-m30Ttn/middleware-insertion-facade.js", "file:///C:/Users/Ayslan/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-m30Ttn/middleware-loader.entry.ts"],
  "sourceRoot": "E:\\pastelaria_new\\.wrangler\\tmp\\dev-WQ46RY",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "const e=({base:e=\"\",routes:t=[],...r}={})=>({__proto__:new Proxy({},{get:(r,o,a,s)=>(r,...c)=>t.push([o.toUpperCase(),RegExp(`^${(s=(e+r).replace(/\\/+(\\/|$)/g,\"$1\")).replace(/(\\/?\\.?):(\\w+)\\+/g,\"($1(?<$2>*))\").replace(/(\\/?\\.?):(\\w+)/g,\"($1(?<$2>[^$1/]+?))\").replace(/\\./g,\"\\\\.\").replace(/(\\/?)\\*/g,\"($1.*)?\")}/*$`),c,s])&&a}),routes:t,...r,async fetch(e,...r){let o,a,s=new URL(e.url),c=e.query={__proto__:null};for(let[e,t]of s.searchParams)c[e]=c[e]?[].concat(c[e],t):t;for(let[c,n,l,i]of t)if((c==e.method||\"ALL\"==c)&&(a=s.pathname.match(n))){e.params=a.groups||{},e.route=i;for(let t of l)if(null!=(o=await t(e.proxy??e,...r)))return o}}}),t=({base:e=\"\",routes:t=[],...r}={})=>({__proto__:new Proxy({},{get:(r,o,a,s)=>(r,...c)=>t.push([o.toUpperCase?.(),RegExp(`^${(s=(e+r).replace(/\\/+(\\/|$)/g,\"$1\")).replace(/(\\/?\\.?):(\\w+)\\+/g,\"($1(?<$2>*))\").replace(/(\\/?\\.?):(\\w+)/g,\"($1(?<$2>[^$1/]+?))\").replace(/\\./g,\"\\\\.\").replace(/(\\/?)\\*/g,\"($1.*)?\")}/*$`),c,s])&&a}),routes:t,...r,async fetch(e,...o){let a,s,c=new URL(e.url),n=e.query={__proto__:null};for(let[e,t]of c.searchParams)n[e]=n[e]?[].concat(n[e],t):t;e:try{for(let t of r.before||[])if(null!=(a=await t(e.proxy??e,...o)))break e;t:for(let[r,n,l,i]of t)if((r==e.method||\"ALL\"==r)&&(s=c.pathname.match(n))){e.params=s.groups||{},e.route=i;for(let t of l)if(null!=(a=await t(e.proxy??e,...o)))break t}}catch(t){if(!r.catch)throw t;a=await r.catch(t,e.proxy??e,...o)}try{for(let t of r.finally||[])a=await t(a,e.proxy??e,...o)??a}catch(t){if(!r.catch)throw t;a=await r.catch(t,e.proxy??e,...o)}return a}}),r=(e=\"text/plain; charset=utf-8\",t)=>(r,o={})=>{if(void 0===r||r instanceof Response)return r;const a=new Response(t?.(r)??r,o.url?void 0:o);return a.headers.set(\"content-type\",e),a},o=r(\"application/json; charset=utf-8\",JSON.stringify),a=e=>({400:\"Bad Request\",401:\"Unauthorized\",403:\"Forbidden\",404:\"Not Found\",500:\"Internal Server Error\"}[e]||\"Unknown Error\"),s=(e=500,t)=>{if(e instanceof Error){const{message:r,...o}=e;e=e.status||500,t={error:r||a(e),...o}}return t={status:e,...\"object\"==typeof t?t:{error:t||a(e)}},o(t,{status:e})},c=e=>{e.proxy=new Proxy(e.proxy??e,{get:(t,r)=>t[r]?.bind?.(e)??t[r]??t?.params?.[r]})},n=({format:e=o,missing:r=(()=>s(404)),finally:a=[],before:n=[],...l}={})=>t({before:[c,...n],catch:s,finally:[(e,...t)=>e??r(...t),e,...a],...l});class l extends Error{status;constructor(e=500,t){super(\"object\"==typeof t?t.error:t),\"object\"==typeof t&&Object.assign(this,t),this.status=e}}const i=(e,t)=>new Response(null,{...t,status:e}),p=r(\"text/plain; charset=utf-8\",String),f=r(\"text/html\"),u=r(\"image/jpeg\"),h=r(\"image/png\"),g=r(\"image/webp\"),d=async e=>{e.content=e.body?await e.clone().json().catch((()=>e.clone().formData())).catch((()=>e.text())):void 0},w=e=>{e.cookies=(e.headers.get(\"Cookie\")||\"\").split(/;\\s*/).map((e=>e.split(/=(.+)/))).reduce(((e,[t,r])=>r?(e[t]=r,e):e),{})},y=(e={})=>{const{origin:t=\"*\",credentials:r=!1,allowMethods:o=\"*\",allowHeaders:a,exposeHeaders:s,maxAge:c}=e,n=e=>{const o=e?.headers.get(\"origin\");return!0===t?o:t instanceof RegExp?t.test(o)?o:void 0:Array.isArray(t)?t.includes(o)?o:void 0:t instanceof Function?t(o):\"*\"==t&&r?o:t},l=(e,t)=>{for(const[r,o]of Object.entries(t))o&&e.headers.append(r,o);return e};return{corsify:(e,t)=>e?.headers?.get(\"access-control-allow-origin\")||101==e.status?e:l(e.clone(),{\"access-control-allow-origin\":n(t),\"access-control-allow-credentials\":r}),preflight:e=>{if(\"OPTIONS\"==e.method){const t=new Response(null,{status:204});return l(t,{\"access-control-allow-origin\":n(e),\"access-control-allow-methods\":o?.join?.(\",\")??o,\"access-control-expose-headers\":s?.join?.(\",\")??s,\"access-control-allow-headers\":a?.join?.(\",\")??a??e.headers.get(\"access-control-request-headers\"),\"access-control-max-age\":c,\"access-control-allow-credentials\":r})}}}};export{n as AutoRouter,e as IttyRouter,t as Router,l as StatusError,y as cors,r as createResponse,s as error,f as html,u as jpeg,o as json,h as png,i as status,p as text,g as webp,d as withContent,w as withCookies,c as withParams};\n", "// Utilit\u00E1rios CORS otimizados para dispositivos m\u00F3veis\n\nexport const corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, X-Device-Type, X-App-Version',\n  'Access-Control-Max-Age': '86400', // 24 horas para reduzir preflight requests\n  'Access-Control-Expose-Headers': 'X-Cache, X-Rate-Limit-Remaining, X-Response-Time'\n};\n\nexport function handleCORS(request) {\n  // Responder a requisi\u00E7\u00F5es OPTIONS (preflight)\n  if (request.method === 'OPTIONS') {\n    return new Response(null, {\n      status: 204,\n      headers: corsHeaders\n    });\n  }\n}\n\nexport function addCORSHeaders(response) {\n  const newHeaders = new Headers(response.headers);\n  \n  Object.entries(corsHeaders).forEach(([key, value]) => {\n    newHeaders.set(key, value);\n  });\n\n  return new Response(response.body, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: newHeaders\n  });\n}", "// Middleware de autentica\u00E7\u00E3o JWT otimizado para mobile\n\nimport { corsHeaders } from '../utils/cors';\n\n/**\n * Gera um token JWT simples (para demonstra\u00E7\u00E3o)\n * Em produ\u00E7\u00E3o, use uma biblioteca JWT completa\n */\nexport function generateToken(payload, secret) {\n  const header = {\n    alg: 'HS256',\n    typ: 'JWT'\n  };\n  \n  const encodedHeader = btoa(JSON.stringify(header));\n  const encodedPayload = btoa(JSON.stringify(payload));\n  \n  // Simula\u00E7\u00E3o de assinatura (use uma biblioteca JWT real em produ\u00E7\u00E3o)\n  const signature = btoa(`${encodedHeader}.${encodedPayload}.${secret}`);\n  \n  return `${encodedHeader}.${encodedPayload}.${signature}`;\n}\n\n/**\n * Verifica um token JWT simples\n */\nexport function verifyToken(token, secret) {\n  try {\n    const [header, payload, signature] = token.split('.');\n    \n    // Verificar assinatura (simplificado)\n    const expectedSignature = btoa(`${header}.${payload}.${secret}`);\n    \n    if (signature !== expectedSignature) {\n      return null;\n    }\n    \n    const decodedPayload = JSON.parse(atob(payload));\n    \n    // Verificar expira\u00E7\u00E3o\n    if (decodedPayload.exp && decodedPayload.exp < Date.now() / 1000) {\n      return null;\n    }\n    \n    return decodedPayload;\n  } catch (error) {\n    return null;\n  }\n}\n\n/**\n * Middleware de autentica\u00E7\u00E3o\n */\nexport async function authenticateRequest(request, env, ctx) {\n  try {\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response(JSON.stringify({\n        error: 'Token de acesso requerido',\n        code: 'MISSING_TOKEN'\n      }), {\n        status: 401,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    const token = authHeader.substring(7); // Remove 'Bearer '\n    const secret = env.JWT_SECRET || 'default-secret-change-in-production';\n    \n    const payload = verifyToken(token, secret);\n    \n    if (!payload) {\n      return new Response(JSON.stringify({\n        error: 'Token inv\u00E1lido ou expirado',\n        code: 'INVALID_TOKEN'\n      }), {\n        status: 401,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    // Adicionar dados do usu\u00E1rio \u00E0 requisi\u00E7\u00E3o\n    request.user = payload;\n    \n    // Continuar para o pr\u00F3ximo middleware/handler\n    return null;\n    \n  } catch (error) {\n    console.error('Erro na autentica\u00E7\u00E3o:', error);\n    return new Response(JSON.stringify({\n      error: 'Erro interno de autentica\u00E7\u00E3o',\n      code: 'AUTH_ERROR'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n}\n\n/**\n * Middleware de autentica\u00E7\u00E3o opcional (n\u00E3o bloqueia se n\u00E3o houver token)\n */\nexport async function optionalAuth(request, env, ctx) {\n  try {\n    const authHeader = request.headers.get('Authorization');\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const token = authHeader.substring(7);\n      const secret = env.JWT_SECRET || 'default-secret-change-in-production';\n      const payload = verifyToken(token, secret);\n      \n      if (payload) {\n        request.user = payload;\n      }\n    }\n    \n    return null; // Sempre continua\n  } catch (error) {\n    console.error('Erro na autentica\u00E7\u00E3o opcional:', error);\n    return null; // N\u00E3o bloqueia em caso de erro\n  }\n}\n\n/**\n * Endpoint para login (exemplo)\n */\nexport async function loginHandler(request, env) {\n  try {\n    const { username, password } = await request.json();\n    \n    // Valida\u00E7\u00E3o simples (em produ\u00E7\u00E3o, use hash de senha e banco de dados)\n    if (username === 'admin' && password === 'admin123') {\n      const payload = {\n        username,\n        role: 'admin',\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 horas\n      };\n      \n      const secret = env.JWT_SECRET || 'default-secret-change-in-production';\n      const token = generateToken(payload, secret);\n      \n      return new Response(JSON.stringify({\n        success: true,\n        token,\n        user: {\n          username: payload.username,\n          role: payload.role\n        },\n        expires_in: 86400 // 24 horas em segundos\n      }), {\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    return new Response(JSON.stringify({\n      error: 'Credenciais inv\u00E1lidas',\n      code: 'INVALID_CREDENTIALS'\n    }), {\n      status: 401,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: 'Erro no login',\n      details: error.message\n    }), {\n      status: 400,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n}\n\n/**\n * Rate limiting simples para proteger endpoints\n */\nexport async function rateLimitMiddleware(request, env, limit = 100, window = 3600) {\n  try {\n    const clientIP = request.headers.get('CF-Connecting-IP') || 'unknown';\n    const key = `rate_limit:${clientIP}`;\n    \n    // Verificar cache para rate limiting\n    const cached = await env.DB.prepare(`\n      SELECT valor, expires_at \n      FROM cache_dados \n      WHERE chave = ? AND expires_at > ?\n    `).bind(key, new Date().toISOString()).first();\n    \n    let requests = 0;\n    \n    if (cached) {\n      requests = parseInt(cached.valor) + 1;\n      \n      if (requests > limit) {\n        return new Response(JSON.stringify({\n          error: 'Muitas requisi\u00E7\u00F5es',\n          code: 'RATE_LIMIT_EXCEEDED',\n          retry_after: window\n        }), {\n          status: 429,\n          headers: {\n            'Content-Type': 'application/json',\n            'Retry-After': window.toString(),\n            ...corsHeaders\n          }\n        });\n      }\n    } else {\n      requests = 1;\n    }\n    \n    // Atualizar contador\n    const expiresAt = new Date(Date.now() + (window * 1000)).toISOString();\n    await env.DB.prepare(`\n      INSERT OR REPLACE INTO cache_dados (chave, valor, expires_at)\n      VALUES (?, ?, ?)\n    `).bind(key, requests.toString(), expiresAt).run();\n    \n    return null; // Continuar\n  } catch (error) {\n    console.error('Erro no rate limiting:', error);\n    return null; // N\u00E3o bloquear em caso de erro\n  }\n}", "// Middleware de valida\u00E7\u00E3o de dados otimizado para mobile\n\nimport { corsHeaders } from '../utils/cors';\n\n/**\n * Validadores b\u00E1sicos\n */\nexport const validators = {\n  required: (value, field) => {\n    if (value === undefined || value === null || value === '') {\n      return `Campo '${field}' \u00E9 obrigat\u00F3rio`;\n    }\n    return null;\n  },\n\n  string: (value, field, options = {}) => {\n    if (typeof value !== 'string') {\n      return `Campo '${field}' deve ser uma string`;\n    }\n    \n    if (options.minLength && value.length < options.minLength) {\n      return `Campo '${field}' deve ter pelo menos ${options.minLength} caracteres`;\n    }\n    \n    if (options.maxLength && value.length > options.maxLength) {\n      return `Campo '${field}' deve ter no m\u00E1ximo ${options.maxLength} caracteres`;\n    }\n    \n    if (options.pattern && !options.pattern.test(value)) {\n      return `Campo '${field}' tem formato inv\u00E1lido`;\n    }\n    \n    return null;\n  },\n\n  number: (value, field, options = {}) => {\n    const num = Number(value);\n    if (isNaN(num)) {\n      return `Campo '${field}' deve ser um n\u00FAmero`;\n    }\n    \n    if (options.min !== undefined && num < options.min) {\n      return `Campo '${field}' deve ser maior ou igual a ${options.min}`;\n    }\n    \n    if (options.max !== undefined && num > options.max) {\n      return `Campo '${field}' deve ser menor ou igual a ${options.max}`;\n    }\n    \n    return null;\n  },\n\n  boolean: (value, field) => {\n    if (typeof value !== 'boolean') {\n      return `Campo '${field}' deve ser verdadeiro ou falso`;\n    }\n    return null;\n  },\n\n  email: (value, field) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(value)) {\n      return `Campo '${field}' deve ser um email v\u00E1lido`;\n    }\n    return null;\n  },\n\n  phone: (value, field) => {\n    // Regex para telefone brasileiro\n    const phoneRegex = /^(\\+55\\s?)?(\\(?\\d{2}\\)?\\s?)?\\d{4,5}-?\\d{4}$/;\n    if (!phoneRegex.test(value)) {\n      return `Campo '${field}' deve ser um telefone v\u00E1lido`;\n    }\n    return null;\n  },\n\n  enum: (value, field, options) => {\n    if (!options.values.includes(value)) {\n      return `Campo '${field}' deve ser um dos valores: ${options.values.join(', ')}`;\n    }\n    return null;\n  },\n\n  array: (value, field, options = {}) => {\n    if (!Array.isArray(value)) {\n      return `Campo '${field}' deve ser uma lista`;\n    }\n    \n    if (options.minLength && value.length < options.minLength) {\n      return `Campo '${field}' deve ter pelo menos ${options.minLength} itens`;\n    }\n    \n    if (options.maxLength && value.length > options.maxLength) {\n      return `Campo '${field}' deve ter no m\u00E1ximo ${options.maxLength} itens`;\n    }\n    \n    return null;\n  }\n};\n\n/**\n * Esquemas de valida\u00E7\u00E3o para diferentes entidades\n */\nexport const schemas = {\n  produto: {\n    nome: [validators.required, (v, f) => validators.string(v, f, { minLength: 2, maxLength: 100 })],\n    categoria: [validators.required, (v, f) => validators.enum(v, f, { values: ['Pizza', 'Pastel', 'Bebida', 'Sobremesa'] })],\n    preco: [validators.required, (v, f) => validators.number(v, f, { min: 0 })],\n    descricao: [(v, f) => v ? validators.string(v, f, { maxLength: 500 }) : null],\n    ativo: [(v, f) => v !== undefined ? validators.boolean(v, f) : null],\n    imagem: [(v, f) => v ? validators.string(v, f, { maxLength: 255 }) : null]\n  },\n\n  sabor: {\n    nome: [validators.required, (v, f) => validators.string(v, f, { minLength: 2, maxLength: 100 })],\n    preco_adicional: [(v, f) => v !== undefined ? validators.number(v, f, { min: 0 }) : null],\n    descricao: [(v, f) => v ? validators.string(v, f, { maxLength: 500 }) : null],\n    ativo: [(v, f) => v !== undefined ? validators.boolean(v, f) : null],\n    categoria: [(v, f) => v ? validators.enum(v, f, { values: ['Doce', 'Salgado', 'Especial'] }) : null]\n  },\n\n  tamanho: {\n    nome: [validators.required, (v, f) => validators.string(v, f, { minLength: 1, maxLength: 50 })],\n    multiplicador: [validators.required, (v, f) => validators.number(v, f, { min: 0.1, max: 10 })],\n    descricao: [(v, f) => v ? validators.string(v, f, { maxLength: 200 }) : null],\n    ativo: [(v, f) => v !== undefined ? validators.boolean(v, f) : null],\n    ordem: [(v, f) => v !== undefined ? validators.number(v, f, { min: 0 }) : null]\n  },\n\n  pedido: {\n    cliente_nome: [validators.required, (v, f) => validators.string(v, f, { minLength: 2, maxLength: 100 })],\n    cliente_telefone: [validators.required, validators.phone],\n    cliente_endereco: [(v, f) => v ? validators.string(v, f, { maxLength: 300 }) : null],\n    forma_pagamento: [validators.required, (v, f) => validators.enum(v, f, { values: ['Dinheiro', 'Cart\u00E3o', 'PIX', 'D\u00E9bito', 'Cr\u00E9dito'] })],\n    tipo_entrega: [validators.required, (v, f) => validators.enum(v, f, { values: ['Balc\u00E3o', 'Entrega'] })],\n    observacoes: [(v, f) => v ? validators.string(v, f, { maxLength: 500 }) : null],\n    itens: [validators.required, (v, f) => validators.array(v, f, { minLength: 1, maxLength: 20 })]\n  },\n\n  itemPedido: {\n    produto_id: [validators.required, (v, f) => validators.number(v, f, { min: 1 })],\n    produto_nome: [validators.required, (v, f) => validators.string(v, f, { minLength: 2, maxLength: 100 })],\n    quantidade: [validators.required, (v, f) => validators.number(v, f, { min: 1, max: 100 })],\n    preco_unitario: [validators.required, (v, f) => validators.number(v, f, { min: 0 })],\n    observacoes: [(v, f) => v ? validators.string(v, f, { maxLength: 200 }) : null]\n  }\n};\n\n/**\n * Valida dados contra um esquema\n */\nexport function validateData(data, schema) {\n  const errors = [];\n  \n  for (const [field, validatorFunctions] of Object.entries(schema)) {\n    const value = data[field];\n    \n    for (const validatorFn of validatorFunctions) {\n      const error = validatorFn(value, field);\n      if (error) {\n        errors.push(error);\n        break; // Para no primeiro erro do campo\n      }\n    }\n  }\n  \n  return errors;\n}\n\n/**\n * Middleware de valida\u00E7\u00E3o\n */\nexport function validateRequest(schema) {\n  return async (request, env, ctx) => {\n    try {\n      // Verificar Content-Type para requisi\u00E7\u00F5es com body\n      if (['POST', 'PUT', 'PATCH'].includes(request.method)) {\n        const contentType = request.headers.get('Content-Type');\n        if (!contentType || !contentType.includes('application/json')) {\n          return new Response(JSON.stringify({\n            error: 'Content-Type deve ser application/json',\n            code: 'INVALID_CONTENT_TYPE'\n          }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n      }\n      \n      // Obter dados do body se existir\n      let data = {};\n      if (['POST', 'PUT', 'PATCH'].includes(request.method)) {\n        try {\n          data = await request.json();\n        } catch (error) {\n          return new Response(JSON.stringify({\n            error: 'JSON inv\u00E1lido no corpo da requisi\u00E7\u00E3o',\n            code: 'INVALID_JSON'\n          }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              ...corsHeaders\n            }\n          });\n        }\n      }\n      \n      // Validar dados\n      const errors = validateData(data, schema);\n      \n      if (errors.length > 0) {\n        return new Response(JSON.stringify({\n          error: 'Dados inv\u00E1lidos',\n          code: 'VALIDATION_ERROR',\n          details: errors\n        }), {\n          status: 400,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n      \n      // Adicionar dados validados \u00E0 requisi\u00E7\u00E3o\n      request.validatedData = data;\n      \n      return null; // Continuar\n    } catch (error) {\n      console.error('Erro na valida\u00E7\u00E3o:', error);\n      return new Response(JSON.stringify({\n        error: 'Erro interno de valida\u00E7\u00E3o',\n        code: 'VALIDATION_INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n  };\n}\n\n/**\n * Sanitiza dados de entrada (remove campos n\u00E3o permitidos)\n */\nexport function sanitizeData(data, allowedFields) {\n  const sanitized = {};\n  \n  for (const field of allowedFields) {\n    if (data.hasOwnProperty(field)) {\n      sanitized[field] = data[field];\n    }\n  }\n  \n  return sanitized;\n}\n\n/**\n * Valida par\u00E2metros de URL\n */\nexport function validateUrlParams(params, schema) {\n  const errors = [];\n  \n  for (const [param, validatorFunctions] of Object.entries(schema)) {\n    const value = params[param];\n    \n    for (const validatorFn of validatorFunctions) {\n      const error = validatorFn(value, param);\n      if (error) {\n        errors.push(error);\n        break;\n      }\n    }\n  }\n  \n  return errors;\n}\n\n/**\n * Middleware para validar tamanho da requisi\u00E7\u00E3o\n */\nexport function validateRequestSize(maxSizeBytes = 1024 * 1024) { // 1MB por padr\u00E3o\n  return async (request, env, ctx) => {\n    const contentLength = request.headers.get('Content-Length');\n    \n    if (contentLength && parseInt(contentLength) > maxSizeBytes) {\n      return new Response(JSON.stringify({\n        error: 'Requisi\u00E7\u00E3o muito grande',\n        code: 'REQUEST_TOO_LARGE',\n        maxSize: maxSizeBytes\n      }), {\n        status: 413,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    return null; // Continue para pr\u00F3ximo middleware\n  };\n}", "// Sistema de cache otimizado para dispositivos m\u00F3veis\n\n/**\n * Armazena uma resposta no cache\n * @param {Object} db - Inst\u00E2ncia do banco D1\n * @param {string} key - Chave do cache\n * @param {string} value - Valor a ser cacheado (JSON string)\n * @param {number} ttl - Time to live em segundos\n */\nexport async function cacheResponse(db, key, value, ttl = 3600) {\n  try {\n    const expiresAt = new Date(Date.now() + (ttl * 1000)).toISOString();\n    \n    await db.prepare(`\n      INSERT OR REPLACE INTO cache_dados (chave, valor, expires_at)\n      VALUES (?, ?, ?)\n    `).bind(key, value, expiresAt).run();\n    \n    return true;\n  } catch (error) {\n    console.error('Erro ao cachear resposta:', error);\n    return false;\n  }\n}\n\n/**\n * Recupera uma resposta do cache\n * @param {Object} db - Inst\u00E2ncia do banco D1\n * @param {string} key - Chave do cache\n * @returns {string|null} - Valor cacheado ou null se n\u00E3o encontrado/expirado\n */\nexport async function getCachedResponse(db, key) {\n  try {\n    const result = await db.prepare(`\n      SELECT valor, expires_at \n      FROM cache_dados \n      WHERE chave = ? AND expires_at > ?\n    `).bind(key, new Date().toISOString()).first();\n    \n    return result ? result.valor : null;\n  } catch (error) {\n    console.error('Erro ao recuperar cache:', error);\n    return null;\n  }\n}\n\n/**\n * Remove uma entrada espec\u00EDfica do cache\n * @param {Object} db - Inst\u00E2ncia do banco D1\n * @param {string} key - Chave do cache\n */\nexport async function invalidateCache(db, key) {\n  try {\n    await db.prepare('DELETE FROM cache_dados WHERE chave = ?')\n      .bind(key).run();\n    return true;\n  } catch (error) {\n    console.error('Erro ao invalidar cache:', error);\n    return false;\n  }\n}\n\n/**\n * Remove m\u00FAltiplas entradas do cache por padr\u00E3o\n * @param {Object} db - Inst\u00E2ncia do banco D1\n * @param {string} pattern - Padr\u00E3o da chave (usando LIKE)\n */\nexport async function invalidateCachePattern(db, pattern) {\n  try {\n    await db.prepare('DELETE FROM cache_dados WHERE chave LIKE ?')\n      .bind(pattern).run();\n    return true;\n  } catch (error) {\n    console.error('Erro ao invalidar cache por padr\u00E3o:', error);\n    return false;\n  }\n}\n\n/**\n * Gera chave de cache baseada na requisi\u00E7\u00E3o\n * @param {Request} request - Objeto da requisi\u00E7\u00E3o\n * @param {Object} params - Par\u00E2metros adicionais\n * @returns {string} - Chave do cache\n */\nexport function generateCacheKey(request, params = {}) {\n  const url = new URL(request.url);\n  const method = request.method;\n  const path = url.pathname;\n  const query = url.search;\n  \n  // Incluir headers relevantes para mobile\n  const deviceType = request.headers.get('X-Device-Type') || 'unknown';\n  const appVersion = request.headers.get('X-App-Version') || 'unknown';\n  \n  const keyParts = [\n    method,\n    path,\n    query,\n    deviceType,\n    appVersion,\n    JSON.stringify(params)\n  ];\n  \n  return keyParts.join('|');\n}\n\n/**\n * Middleware para cache autom\u00E1tico\n * @param {Function} handler - Handler da rota\n * @param {number} ttl - Time to live em segundos\n * @returns {Function} - Handler com cache\n */\nexport function withCache(handler, ttl = 3600) {\n  return async (request, env, ctx) => {\n    const cacheKey = generateCacheKey(request);\n    \n    // Tentar recuperar do cache\n    const cached = await getCachedResponse(env.DB, cacheKey);\n    if (cached) {\n      return new Response(cached, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Cache': 'HIT'\n        }\n      });\n    }\n    \n    // Executar handler original\n    const response = await handler(request, env, ctx);\n    \n    // Cachear apenas respostas de sucesso\n    if (response.status === 200) {\n      const responseText = await response.text();\n      await cacheResponse(env.DB, cacheKey, responseText, ttl);\n      \n      return new Response(responseText, {\n        status: response.status,\n        headers: {\n          ...response.headers,\n          'X-Cache': 'MISS'\n        }\n      });\n    }\n    \n    return response;\n  };\n}\n\n/**\n * Limpa cache expirado (para uso em cron jobs)\n * @param {Object} db - Inst\u00E2ncia do banco D1\n */\nexport async function cleanExpiredCache(db) {\n  try {\n    const result = await db.prepare(`\n      DELETE FROM cache_dados \n      WHERE expires_at < ?\n    `).bind(new Date().toISOString()).run();\n    \n    console.log(`Cache limpo: ${result.changes} entradas removidas`);\n    return result.changes;\n  } catch (error) {\n    console.error('Erro ao limpar cache expirado:', error);\n    return 0;\n  }\n}", "// Utilit\u00E1rios de otimiza\u00E7\u00E3o para dispositivos m\u00F3veis\n\n/**\n * Comprime dados JSON para reduzir uso de banda em dispositivos m\u00F3veis\n */\nexport function compressResponse(data) {\n  // Implementa\u00E7\u00E3o b\u00E1sica de compress\u00E3o\n  // Em produ\u00E7\u00E3o, use uma biblioteca de compress\u00E3o real\n  const jsonString = JSON.stringify(data);\n  \n  // Remover espa\u00E7os desnecess\u00E1rios e otimizar estrutura\n  const optimized = {\n    d: data, // dados\n    t: Date.now(), // timestamp\n    c: true // compressed flag\n  };\n  \n  return JSON.stringify(optimized);\n}\n\n/**\n * Descomprime dados recebidos\n */\nexport function decompressResponse(compressedData) {\n  try {\n    const parsed = JSON.parse(compressedData);\n    return parsed.c ? parsed.d : parsed;\n  } catch (error) {\n    return compressedData;\n  }\n}\n\n/**\n * Otimiza consultas para dispositivos m\u00F3veis\n */\nexport function optimizeQueryForMobile(baseQuery, options = {}) {\n  const {\n    limit = 50,\n    offset = 0,\n    fields = '*',\n    orderBy = 'id DESC'\n  } = options;\n  \n  // Limitar resultados para economizar banda e mem\u00F3ria\n  let optimizedQuery = baseQuery;\n  \n  if (fields !== '*') {\n    optimizedQuery = optimizedQuery.replace('SELECT *', `SELECT ${fields}`);\n  }\n  \n  if (!optimizedQuery.includes('LIMIT')) {\n    optimizedQuery += ` ORDER BY ${orderBy} LIMIT ${limit}`;\n    \n    if (offset > 0) {\n      optimizedQuery += ` OFFSET ${offset}`;\n    }\n  }\n  \n  return optimizedQuery;\n}\n\n/**\n * Detecta tipo de dispositivo baseado nos headers\n */\nexport function detectDeviceType(request) {\n  const userAgent = request.headers.get('User-Agent') || '';\n  const deviceType = request.headers.get('X-Device-Type');\n  \n  if (deviceType) {\n    return deviceType.toLowerCase();\n  }\n  \n  // Detec\u00E7\u00E3o b\u00E1sica por User-Agent\n  if (/Mobile|Android|iPhone|iPad/.test(userAgent)) {\n    if (/iPad/.test(userAgent)) {\n      return 'tablet';\n    }\n    return 'mobile';\n  }\n  \n  return 'desktop';\n}\n\n/**\n * Ajusta resposta baseada no tipo de dispositivo\n */\nexport function adaptResponseForDevice(data, deviceType) {\n  switch (deviceType) {\n    case 'mobile':\n      return {\n        ...data,\n        // Remover campos desnecess\u00E1rios para mobile\n        metadata: undefined,\n        debug: undefined,\n        // Limitar arrays grandes\n        items: Array.isArray(data.items) ? data.items.slice(0, 20) : data.items\n      };\n      \n    case 'tablet':\n      return {\n        ...data,\n        // Permitir mais dados para tablets\n        items: Array.isArray(data.items) ? data.items.slice(0, 50) : data.items\n      };\n      \n    default:\n      return data;\n  }\n}\n\n/**\n * Implementa pagina\u00E7\u00E3o otimizada para mobile\n */\nexport function createMobilePagination(totalItems, currentPage = 1, itemsPerPage = 20) {\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const hasNext = currentPage < totalPages;\n  const hasPrev = currentPage > 1;\n  \n  return {\n    current_page: currentPage,\n    items_per_page: itemsPerPage,\n    total_items: totalItems,\n    total_pages: totalPages,\n    has_next: hasNext,\n    has_previous: hasPrev,\n    next_page: hasNext ? currentPage + 1 : null,\n    previous_page: hasPrev ? currentPage - 1 : null\n  };\n}\n\n/**\n * Otimiza imagens para dispositivos m\u00F3veis\n */\nexport function optimizeImageUrl(imageUrl, deviceType, quality = 'medium') {\n  if (!imageUrl) return '';\n  \n  // Se usando Cloudflare Images, adicionar transforma\u00E7\u00F5es\n  if (imageUrl.includes('imagedelivery.net')) {\n    const qualityMap = {\n      'low': 'q_30,f_auto',\n      'medium': 'q_60,f_auto',\n      'high': 'q_80,f_auto'\n    };\n    \n    const sizeMap = {\n      'mobile': 'w_400,h_400',\n      'tablet': 'w_600,h_600',\n      'desktop': 'w_800,h_800'\n    };\n    \n    const transforms = [\n      qualityMap[quality] || qualityMap.medium,\n      sizeMap[deviceType] || sizeMap.mobile\n    ].join(',');\n    \n    return `${imageUrl}/${transforms}`;\n  }\n  \n  return imageUrl;\n}\n\n/**\n * Implementa throttling de requisi\u00E7\u00F5es para economizar bateria\n */\nexport class RequestThrottler {\n  constructor(maxRequests = 100, windowMs = 60000) {\n    this.maxRequests = maxRequests;\n    this.windowMs = windowMs;\n    this.requests = new Map();\n  }\n  \n  canMakeRequest(clientId) {\n    const now = Date.now();\n    const windowStart = now - this.windowMs;\n    \n    if (!this.requests.has(clientId)) {\n      this.requests.set(clientId, []);\n    }\n    \n    const clientRequests = this.requests.get(clientId);\n    \n    // Remover requisi\u00E7\u00F5es antigas\n    const validRequests = clientRequests.filter(time => time > windowStart);\n    this.requests.set(clientId, validRequests);\n    \n    if (validRequests.length >= this.maxRequests) {\n      return false;\n    }\n    \n    // Adicionar nova requisi\u00E7\u00E3o\n    validRequests.push(now);\n    return true;\n  }\n  \n  getRemainingRequests(clientId) {\n    const now = Date.now();\n    const windowStart = now - this.windowMs;\n    \n    if (!this.requests.has(clientId)) {\n      return this.maxRequests;\n    }\n    \n    const validRequests = this.requests.get(clientId)\n      .filter(time => time > windowStart);\n    \n    return Math.max(0, this.maxRequests - validRequests.length);\n  }\n}\n\n/**\n * Otimiza dados para armazenamento local em dispositivos m\u00F3veis\n */\nexport function optimizeForLocalStorage(data) {\n  // Remover campos desnecess\u00E1rios\n  const optimized = { ...data };\n  \n  // Remover timestamps desnecess\u00E1rios\n  delete optimized.created_at;\n  delete optimized.updated_at;\n  \n  // Converter n\u00FAmeros para strings se necess\u00E1rio (economizar espa\u00E7o)\n  if (optimized.preco) {\n    optimized.preco = optimized.preco.toString();\n  }\n  \n  // Remover campos vazios\n  Object.keys(optimized).forEach(key => {\n    if (optimized[key] === null || optimized[key] === undefined || optimized[key] === '') {\n      delete optimized[key];\n    }\n  });\n  \n  return optimized;\n}\n\n/**\n * Implementa cache inteligente baseado na conectividade\n */\nexport function getCacheStrategy(request) {\n  const connection = request.headers.get('X-Connection-Type') || 'unknown';\n  const deviceType = detectDeviceType(request);\n  \n  // Estrat\u00E9gias de cache baseadas na conectividade\n  const strategies = {\n    'wifi': {\n      ttl: 300, // 5 minutos\n      maxSize: 1000,\n      preload: true\n    },\n    '4g': {\n      ttl: 600, // 10 minutos\n      maxSize: 500,\n      preload: false\n    },\n    '3g': {\n      ttl: 1800, // 30 minutos\n      maxSize: 200,\n      preload: false\n    },\n    '2g': {\n      ttl: 3600, // 1 hora\n      maxSize: 100,\n      preload: false\n    },\n    'unknown': {\n      ttl: 600, // 10 minutos\n      maxSize: 300,\n      preload: false\n    }\n  };\n  \n  return strategies[connection] || strategies.unknown;\n}\n\n/**\n * Monitora performance da aplica\u00E7\u00E3o em dispositivos m\u00F3veis\n */\nexport function createPerformanceMetrics(request, startTime) {\n  const endTime = Date.now();\n  const duration = endTime - startTime;\n  const deviceType = detectDeviceType(request);\n  \n  return {\n    duration_ms: duration,\n    device_type: deviceType,\n    timestamp: new Date().toISOString(),\n    url: request.url,\n    method: request.method,\n    user_agent: request.headers.get('User-Agent'),\n    connection_type: request.headers.get('X-Connection-Type')\n  };\n}\n\n/**\n * Implementa retry autom\u00E1tico para requisi\u00E7\u00F5es falhadas\n */\nexport async function retryRequest(requestFn, maxRetries = 3, delay = 1000) {\n  let lastError;\n  \n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await requestFn();\n    } catch (error) {\n      lastError = error;\n      \n      if (i < maxRetries - 1) {\n        // Backoff exponencial\n        const waitTime = delay * Math.pow(2, i);\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      }\n    }\n  }\n  \n  throw lastError;\n}\n\n/**\n * Otimiza limite de resultados baseado no tipo de dispositivo\n */\nexport function optimizeForMobile(limit, deviceType) {\n  const deviceLimits = {\n    'mobile': Math.min(limit, 10),\n    'tablet': Math.min(limit, 20),\n    'desktop': limit\n  };\n  \n  return deviceLimits[deviceType] || deviceLimits.mobile;\n}", "// API de Produtos otimizada para Cloudflare D1 e dispositivos m\u00F3veis\n\nimport { Router } from 'itty-router';\nimport { corsHeaders } from '../utils/cors';\nimport { optionalAuth } from '../middleware/auth';\nimport { validateRequest, schemas, validateUrlParams, validators } from '../middleware/validation';\nimport { withCache, invalidateCachePattern } from '../utils/cache';\nimport { detectDeviceType, adaptResponseForDevice, createMobilePagination, optimizeImageUrl } from '../utils/mobile-optimization';\n\nconst router = Router();\n\n// Listar produtos com otimiza\u00E7\u00F5es para mobile\nrouter.get('/api/v1/produtos', withCache(async (request, env) => {\n  try {\n    const url = new URL(request.url);\n    const page = parseInt(url.searchParams.get('page')) || 1;\n    const limit = parseInt(url.searchParams.get('limit')) || 20;\n    const categoria = url.searchParams.get('categoria');\n    const ativo = url.searchParams.get('ativo');\n    const search = url.searchParams.get('search');\n    \n    const deviceType = detectDeviceType(request);\n    const offset = (page - 1) * limit;\n    \n    // Construir query din\u00E2mica\n    let whereConditions = [];\n    let params = [];\n    \n    if (categoria) {\n      whereConditions.push('categoria = ?');\n      params.push(categoria);\n    }\n    \n    if (ativo !== null && ativo !== undefined) {\n      whereConditions.push('ativo = ?');\n      params.push(ativo === 'true' ? 1 : 0);\n    }\n    \n    if (search) {\n      whereConditions.push('(nome LIKE ? OR descricao LIKE ?)');\n      params.push(`%${search}%`, `%${search}%`);\n    }\n    \n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n    \n    // Query para contar total\n    const countQuery = `SELECT COUNT(*) as total FROM produtos ${whereClause}`;\n    const countResult = await env.DB.prepare(countQuery).bind(...params).first();\n    const total = countResult.total;\n    \n    // Query para buscar produtos\n    const query = `\n      SELECT id, nome, categoria, preco, descricao, ativo, imagem, updated_at\n      FROM produtos \n      ${whereClause}\n      ORDER BY nome ASC \n      LIMIT ? OFFSET ?\n    `;\n    \n    const result = await env.DB.prepare(query).bind(...params, limit, offset).all();\n    const produtos = result.results || [];\n    \n    // Otimizar imagens para o dispositivo\n    const produtosOtimizados = produtos.map(produto => ({\n      ...produto,\n      imagem: optimizeImageUrl(produto.imagem, deviceType),\n      preco: parseFloat(produto.preco) // Garantir que pre\u00E7o seja n\u00FAmero\n    }));\n    \n    const pagination = createMobilePagination(total, page, limit);\n    \n    const response = {\n      success: true,\n      data: produtosOtimizados,\n      pagination,\n      filters: {\n        categoria,\n        ativo,\n        search\n      }\n    };\n    \n    // Adaptar resposta para o dispositivo\n    const adaptedResponse = adaptResponseForDevice(response, deviceType);\n    \n    return new Response(JSON.stringify(adaptedResponse), {\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: 'Erro ao buscar produtos',\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n}, 300)); // Cache por 5 minutos\n\n// Buscar produto por ID\nrouter.get('/api/v1/produtos/:id', withCache(async (request, env) => {\n  try {\n    const { id } = request.params;\n    \n    // Validar ID\n    const errors = validateUrlParams({ id }, {\n      id: [validators.required, (v, f) => validators.number(v, f, { min: 1 })]\n    });\n    \n    if (errors.length > 0) {\n      return new Response(JSON.stringify({\n        error: 'ID inv\u00E1lido',\n        details: errors\n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    const produto = await env.DB.prepare(`\n      SELECT id, nome, categoria, preco, descricao, ativo, imagem, created_at, updated_at\n      FROM produtos \n      WHERE id = ?\n    `).bind(id).first();\n    \n    if (!produto) {\n      return new Response(JSON.stringify({\n        error: 'Produto n\u00E3o encontrado'\n      }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    const deviceType = detectDeviceType(request);\n    \n    const produtoOtimizado = {\n      ...produto,\n      imagem: optimizeImageUrl(produto.imagem, deviceType),\n      preco: parseFloat(produto.preco)\n    };\n    \n    return new Response(JSON.stringify({\n      success: true,\n      data: produtoOtimizado\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: 'Erro ao buscar produto',\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n}, 600)); // Cache por 10 minutos\n\n// Criar novo produto\nrouter.post('/api/v1/produtos', optionalAuth, validateRequest(schemas.produto), async (request, env) => {\n  try {\n    const data = request.validatedData;\n    \n    const result = await env.DB.prepare(`\n      INSERT INTO produtos (nome, categoria, preco, descricao, ativo, imagem)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `).bind(\n      data.nome,\n      data.categoria || 'Pizza',\n      data.preco,\n      data.descricao || '',\n      data.ativo !== undefined ? (data.ativo ? 1 : 0) : 1,\n      data.imagem || ''\n    ).run();\n    \n    if (result.success) {\n      // Invalidar cache de produtos\n      await invalidateCachePattern(env.DB, 'GET|/api/v1/produtos%');\n      \n      // Buscar produto criado\n      const novoProduto = await env.DB.prepare(`\n        SELECT * FROM produtos WHERE id = ?\n      `).bind(result.meta.last_row_id).first();\n      \n      return new Response(JSON.stringify({\n        success: true,\n        message: 'Produto criado com sucesso',\n        data: {\n          ...novoProduto,\n          preco: parseFloat(novoProduto.preco)\n        }\n      }), {\n        status: 201,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    throw new Error('Falha ao criar produto');\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: 'Erro ao criar produto',\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n});\n\n// Atualizar produto\nrouter.put('/api/v1/produtos/:id', optionalAuth, validateRequest(schemas.produto), async (request, env) => {\n  try {\n    const { id } = request.params;\n    const data = request.validatedData;\n    \n    // Validar ID\n    const errors = validateUrlParams({ id }, {\n      id: [validators.required, (v, f) => validators.number(v, f, { min: 1 })]\n    });\n    \n    if (errors.length > 0) {\n      return new Response(JSON.stringify({\n        error: 'ID inv\u00E1lido',\n        details: errors\n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    const result = await env.DB.prepare(`\n      UPDATE produtos \n      SET nome = ?, categoria = ?, preco = ?, descricao = ?, ativo = ?, imagem = ?, updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    `).bind(\n      data.nome,\n      data.categoria || 'Pizza',\n      data.preco,\n      data.descricao || '',\n      data.ativo !== undefined ? (data.ativo ? 1 : 0) : 1,\n      data.imagem || '',\n      id\n    ).run();\n    \n    if (result.success && result.changes > 0) {\n      // Invalidar cache\n      await invalidateCachePattern(env.DB, 'GET|/api/v1/produtos%');\n      \n      // Buscar produto atualizado\n      const produtoAtualizado = await env.DB.prepare(`\n        SELECT * FROM produtos WHERE id = ?\n      `).bind(id).first();\n      \n      return new Response(JSON.stringify({\n        success: true,\n        message: 'Produto atualizado com sucesso',\n        data: {\n          ...produtoAtualizado,\n          preco: parseFloat(produtoAtualizado.preco)\n        }\n      }), {\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    return new Response(JSON.stringify({\n      error: 'Produto n\u00E3o encontrado'\n    }), {\n      status: 404,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: 'Erro ao atualizar produto',\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n});\n\n// Deletar produto\nrouter.delete('/api/v1/produtos/:id', optionalAuth, async (request, env) => {\n  try {\n    const { id } = request.params;\n    \n    // Validar ID\n    const errors = validateUrlParams({ id }, {\n      id: [validators.required, (v, f) => validators.number(v, f, { min: 1 })]\n    });\n    \n    if (errors.length > 0) {\n      return new Response(JSON.stringify({\n        error: 'ID inv\u00E1lido',\n        details: errors\n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    // Verificar se produto existe\n    const produto = await env.DB.prepare('SELECT id FROM produtos WHERE id = ?').bind(id).first();\n    \n    if (!produto) {\n      return new Response(JSON.stringify({\n        error: 'Produto n\u00E3o encontrado'\n      }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    // Soft delete - apenas marcar como inativo\n    const result = await env.DB.prepare(`\n      UPDATE produtos \n      SET ativo = 0, updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    `).bind(id).run();\n    \n    if (result.success) {\n      // Invalidar cache\n      await invalidateCachePattern(env.DB, 'GET|/api/v1/produtos%');\n      \n      return new Response(JSON.stringify({\n        success: true,\n        message: 'Produto removido com sucesso'\n      }), {\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    throw new Error('Falha ao remover produto');\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: 'Erro ao remover produto',\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n});\n\nexport default router;", "import { Router } from 'itty-router';\nimport { validateRequest, validateUrlParams } from '../middleware/validation.js';\nimport { authenticateRequest, optionalAuth } from '../middleware/auth.js';\nimport { withCache, generateCacheKey, invalidateCache } from '../utils/cache.js';\nimport { addCORSHeaders } from '../utils/cors.js';\nimport { \n  optimizeForMobile, \n  createMobilePagination, \n  compressResponse,\n  adaptResponseForDevice \n} from '../utils/mobile-optimization.js';\n\nconst router = Router();\n\n// Schema de valida\u00E7\u00E3o para sabores\nconst saborSchema = {\n  nome: { required: true, type: 'string', maxLength: 100 },\n  precoAdicional: { required: true, type: 'number', min: 0 },\n  descricao: { type: 'string', maxLength: 500 },\n  ativo: { type: 'boolean', default: true },\n  categoria: { type: 'string', maxLength: 50 }\n};\n\n// Listar sabores com otimiza\u00E7\u00F5es para mobile\nrouter.get('/api/v1/sabores', optionalAuth, async (request, env) => {\n  try {\n    const url = new URL(request.url);\n    const page = parseInt(url.searchParams.get('page')) || 1;\n    const limit = parseInt(url.searchParams.get('limit')) || 20;\n    const categoria = url.searchParams.get('categoria');\n    const ativo = url.searchParams.get('ativo');\n    const search = url.searchParams.get('search');\n    const deviceType = request.headers.get('X-Device-Type') || 'desktop';\n    \n    // Otimizar limite baseado no dispositivo\n    const optimizedLimit = optimizeForMobile(limit, deviceType);\n    const offset = (page - 1) * optimizedLimit;\n    \n    // Construir query com filtros\n    let query = 'SELECT * FROM sabores WHERE 1=1';\n    const params = [];\n    \n    if (categoria) {\n      query += ' AND categoria = ?';\n      params.push(categoria);\n    }\n    \n    if (ativo !== null && ativo !== undefined) {\n      query += ' AND ativo = ?';\n      params.push(ativo === 'true' ? 1 : 0);\n    }\n    \n    if (search) {\n      query += ' AND (nome LIKE ? OR descricao LIKE ?)';\n      params.push(`%${search}%`, `%${search}%`);\n    }\n    \n    // Adicionar ordena\u00E7\u00E3o e pagina\u00E7\u00E3o\n    query += ' ORDER BY nome ASC LIMIT ? OFFSET ?';\n    params.push(optimizedLimit, offset);\n    \n    // Executar query principal\n    const { results: sabores } = await env.DB.prepare(query).bind(...params).all();\n    \n    // Query para contar total\n    let countQuery = 'SELECT COUNT(*) as total FROM sabores WHERE 1=1';\n    const countParams = [];\n    \n    if (categoria) {\n      countQuery += ' AND categoria = ?';\n      countParams.push(categoria);\n    }\n    \n    if (ativo !== null && ativo !== undefined) {\n      countQuery += ' AND ativo = ?';\n      countParams.push(ativo === 'true' ? 1 : 0);\n    }\n    \n    if (search) {\n      countQuery += ' AND (nome LIKE ? OR descricao LIKE ?)';\n      countParams.push(`%${search}%`, `%${search}%`);\n    }\n    \n    const { results: [{ total }] } = await env.DB.prepare(countQuery).bind(...countParams).all();\n    \n    // Criar pagina\u00E7\u00E3o otimizada para mobile\n    const pagination = createMobilePagination(page, optimizedLimit, total, deviceType);\n    \n    // Adaptar response para o dispositivo\n    const adaptedSabores = adaptResponseForDevice(sabores, deviceType, {\n      removeFields: deviceType === 'mobile' ? ['created_at', 'updated_at'] : [],\n      optimizeNumbers: true\n    });\n    \n    const response = {\n      success: true,\n      data: adaptedSabores,\n      pagination,\n      filters: {\n        categoria,\n        ativo: ativo ? (ativo === 'true') : null,\n        search\n      },\n      meta: {\n        total,\n        device_optimized: true,\n        cache_strategy: deviceType === 'mobile' ? 'aggressive' : 'moderate'\n      }\n    };\n    \n    // Comprimir response se necess\u00E1rio\n    const finalResponse = await compressResponse(response, request);\n    \n    return addCORSHeaders(new Response(JSON.stringify(finalResponse), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': deviceType === 'mobile' ? 'public, max-age=1800' : 'public, max-age=600',\n        'X-Device-Optimized': 'true'\n      }\n    }));\n    \n  } catch (error) {\n    console.error('Erro ao listar sabores:', error);\n    return addCORSHeaders(new Response(JSON.stringify({\n      success: false,\n      error: 'Erro interno do servidor',\n      code: 'INTERNAL_ERROR'\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    }));\n  }\n});\n\n// Buscar sabor por ID\nrouter.get('/api/v1/sabores/:id', \n  validateUrlParams({ id: { required: true, type: 'string' } }),\n  optionalAuth,\n  withCache(300), // Cache por 5 minutos\n  async (request, env) => {\n    try {\n      const { id } = request.params;\n      const deviceType = request.headers.get('X-Device-Type') || 'desktop';\n      \n      const { results } = await env.DB.prepare(\n        'SELECT * FROM sabores WHERE id = ?'\n      ).bind(id).all();\n      \n      if (results.length === 0) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Sabor n\u00E3o encontrado',\n          code: 'NOT_FOUND'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      const sabor = results[0];\n      \n      // Adaptar response para o dispositivo\n      const adaptedSabor = adaptResponseForDevice(sabor, deviceType, {\n        removeFields: deviceType === 'mobile' ? ['created_at', 'updated_at'] : [],\n        optimizeNumbers: true\n      });\n      \n      const response = {\n        success: true,\n        data: adaptedSabor,\n        meta: {\n          device_optimized: true,\n          cached: true\n        }\n      };\n      \n      const finalResponse = await compressResponse(response, request);\n      \n      return addCORSHeaders(new Response(JSON.stringify(finalResponse), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'public, max-age=300',\n          'X-Device-Optimized': 'true'\n        }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao buscar sabor:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Criar novo sabor\nrouter.post('/api/v1/sabores',\n  authenticateRequest,\n  validateRequest(saborSchema),\n  async (request, env) => {\n    try {\n      const data = request.validatedData;\n      const now = new Date().toISOString();\n      \n      const { results } = await env.DB.prepare(`\n        INSERT INTO sabores (nome, preco_adicional, descricao, ativo, categoria, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?)\n        RETURNING *\n      `).bind(\n        data.nome,\n        data.precoAdicional,\n        data.descricao || null,\n        data.ativo !== false ? 1 : 0,\n        data.categoria || null,\n        now,\n        now\n      ).all();\n      \n      const novoSabor = results[0];\n      \n      // Invalidar cache relacionado\n      await invalidateCache(env, 'sabores:*');\n      \n      // Adicionar \u00E0 fila de sincroniza\u00E7\u00E3o\n      await env.DB.prepare(`\n        INSERT INTO sync_queue (table_name, record_id, operation, data, created_at)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(\n        'sabores',\n        novoSabor.id,\n        'create',\n        JSON.stringify(novoSabor),\n        now\n      ).run();\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        data: novoSabor,\n        message: 'Sabor criado com sucesso'\n      }), {\n        status: 201,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao criar sabor:', error);\n      \n      if (error.message.includes('UNIQUE constraint failed')) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'J\u00E1 existe um sabor com este nome',\n          code: 'DUPLICATE_NAME'\n        }), {\n          status: 409,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Atualizar sabor\nrouter.put('/api/v1/sabores/:id',\n  validateUrlParams({ id: { required: true, type: 'string' } }),\n  authenticateRequest,\n  validateRequest(saborSchema, false), // Valida\u00E7\u00E3o parcial para updates\n  async (request, env) => {\n    try {\n      const { id } = request.params;\n      const data = request.validatedData;\n      const now = new Date().toISOString();\n      \n      // Verificar se o sabor existe\n      const { results: existing } = await env.DB.prepare(\n        'SELECT * FROM sabores WHERE id = ?'\n      ).bind(id).all();\n      \n      if (existing.length === 0) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Sabor n\u00E3o encontrado',\n          code: 'NOT_FOUND'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      // Construir query de update dinamicamente\n      const updateFields = [];\n      const updateValues = [];\n      \n      if (data.nome !== undefined) {\n        updateFields.push('nome = ?');\n        updateValues.push(data.nome);\n      }\n      \n      if (data.precoAdicional !== undefined) {\n        updateFields.push('preco_adicional = ?');\n        updateValues.push(data.precoAdicional);\n      }\n      \n      if (data.descricao !== undefined) {\n        updateFields.push('descricao = ?');\n        updateValues.push(data.descricao);\n      }\n      \n      if (data.ativo !== undefined) {\n        updateFields.push('ativo = ?');\n        updateValues.push(data.ativo ? 1 : 0);\n      }\n      \n      if (data.categoria !== undefined) {\n        updateFields.push('categoria = ?');\n        updateValues.push(data.categoria);\n      }\n      \n      updateFields.push('updated_at = ?');\n      updateValues.push(now);\n      updateValues.push(id);\n      \n      const { results } = await env.DB.prepare(`\n        UPDATE sabores SET ${updateFields.join(', ')} WHERE id = ?\n        RETURNING *\n      `).bind(...updateValues).all();\n      \n      const saborAtualizado = results[0];\n      \n      // Invalidar cache relacionado\n      await invalidateCache(env, 'sabores:*');\n      await invalidateCache(env, `sabor:${id}`);\n      \n      // Adicionar \u00E0 fila de sincroniza\u00E7\u00E3o\n      await env.DB.prepare(`\n        INSERT INTO sync_queue (table_name, record_id, operation, data, created_at)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(\n        'sabores',\n        id,\n        'update',\n        JSON.stringify(saborAtualizado),\n        now\n      ).run();\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        data: saborAtualizado,\n        message: 'Sabor atualizado com sucesso'\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao atualizar sabor:', error);\n      \n      if (error.message.includes('UNIQUE constraint failed')) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'J\u00E1 existe um sabor com este nome',\n          code: 'DUPLICATE_NAME'\n        }), {\n          status: 409,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Remover sabor (soft delete)\nrouter.delete('/api/v1/sabores/:id',\n  validateUrlParams({ id: { required: true, type: 'string' } }),\n  authenticateRequest,\n  async (request, env) => {\n    try {\n      const { id } = request.params;\n      const now = new Date().toISOString();\n      \n      // Verificar se o sabor existe\n      const { results: existing } = await env.DB.prepare(\n        'SELECT * FROM sabores WHERE id = ?'\n      ).bind(id).all();\n      \n      if (existing.length === 0) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Sabor n\u00E3o encontrado',\n          code: 'NOT_FOUND'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      // Verificar se o sabor est\u00E1 sendo usado em pedidos\n      const { results: pedidosUsando } = await env.DB.prepare(`\n        SELECT COUNT(*) as count FROM item_sabores \n        WHERE sabor_id = ?\n      `).bind(id).all();\n      \n      if (pedidosUsando[0].count > 0) {\n        // Soft delete - apenas desativar\n        await env.DB.prepare(`\n          UPDATE sabores SET ativo = 0, updated_at = ? WHERE id = ?\n        `).bind(now, id).run();\n        \n        return addCORSHeaders(new Response(JSON.stringify({\n          success: true,\n          message: 'Sabor desativado com sucesso (estava sendo usado em pedidos)',\n          action: 'deactivated'\n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      } else {\n        // Hard delete - remover completamente\n        await env.DB.prepare('DELETE FROM sabores WHERE id = ?').bind(id).run();\n        \n        // Invalidar cache relacionado\n        await invalidateCache(env, 'sabores:*');\n        await invalidateCache(env, `sabor:${id}`);\n        \n        // Adicionar \u00E0 fila de sincroniza\u00E7\u00E3o\n        await env.DB.prepare(`\n          INSERT INTO sync_queue (table_name, record_id, operation, data, created_at)\n          VALUES (?, ?, ?, ?, ?)\n        `).bind(\n          'sabores',\n          id,\n          'delete',\n          JSON.stringify({ id }),\n          now\n        ).run();\n        \n        return addCORSHeaders(new Response(JSON.stringify({\n          success: true,\n          message: 'Sabor removido com sucesso',\n          action: 'deleted'\n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n    } catch (error) {\n      console.error('Erro ao remover sabor:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Listar categorias de sabores\nrouter.get('/api/v1/sabores/categorias', \n  optionalAuth,\n  withCache(1800), // Cache por 30 minutos\n  async (request, env) => {\n    try {\n      const { results } = await env.DB.prepare(`\n        SELECT DISTINCT categoria \n        FROM sabores \n        WHERE categoria IS NOT NULL AND categoria != '' AND ativo = 1\n        ORDER BY categoria ASC\n      `).all();\n      \n      const categorias = results.map(row => row.categoria);\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        data: categorias,\n        meta: {\n          total: categorias.length,\n          cached: true\n        }\n      }), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'public, max-age=1800'\n        }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao listar categorias:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\nexport default router;", "import { Router } from 'itty-router';\nimport { validateRequest, validateUrlParams } from '../middleware/validation.js';\nimport { authenticateRequest, optionalAuth } from '../middleware/auth.js';\nimport { withCache, generateCacheKey, invalidateCache } from '../utils/cache.js';\nimport { addCORSHeaders } from '../utils/cors.js';\nimport { \n  optimizeForMobile, \n  createMobilePagination, \n  compressResponse,\n  adaptResponseForDevice \n} from '../utils/mobile-optimization.js';\n\nconst router = Router();\n\n// Schema de valida\u00E7\u00E3o para tamanhos\nconst tamanhoSchema = {\n  nome: { required: true, type: 'string', maxLength: 50 },\n  multiplicador: { required: true, type: 'number', min: 0.1, max: 10 },\n  descricao: { type: 'string', maxLength: 200 },\n  ativo: { type: 'boolean', default: true },\n  ordem: { type: 'number', min: 0, default: 0 }\n};\n\n// Listar tamanhos com otimiza\u00E7\u00F5es para mobile\nrouter.get('/api/v1/tamanhos', optionalAuth, async (request, env) => {\n  try {\n    const url = new URL(request.url);\n    const page = parseInt(url.searchParams.get('page')) || 1;\n    const limit = parseInt(url.searchParams.get('limit')) || 20;\n    const ativo = url.searchParams.get('ativo');\n    const search = url.searchParams.get('search');\n    const deviceType = request.headers.get('X-Device-Type') || 'desktop';\n    \n    // Otimizar limite baseado no dispositivo\n    const optimizedLimit = optimizeForMobile(limit, deviceType);\n    const offset = (page - 1) * optimizedLimit;\n    \n    // Construir query com filtros\n    let query = 'SELECT * FROM tamanhos WHERE 1=1';\n    const params = [];\n    \n    if (ativo !== null && ativo !== undefined) {\n      query += ' AND ativo = ?';\n      params.push(ativo === 'true' ? 1 : 0);\n    }\n    \n    if (search) {\n      query += ' AND (nome LIKE ? OR descricao LIKE ?)';\n      params.push(`%${search}%`, `%${search}%`);\n    }\n    \n    // Adicionar ordena\u00E7\u00E3o e pagina\u00E7\u00E3o\n    query += ' ORDER BY ordem ASC, nome ASC LIMIT ? OFFSET ?';\n    params.push(optimizedLimit, offset);\n    \n    // Executar query principal\n    const { results: tamanhos } = await env.DB.prepare(query).bind(...params).all();\n    \n    // Query para contar total\n    let countQuery = 'SELECT COUNT(*) as total FROM tamanhos WHERE 1=1';\n    const countParams = [];\n    \n    if (ativo !== null && ativo !== undefined) {\n      countQuery += ' AND ativo = ?';\n      countParams.push(ativo === 'true' ? 1 : 0);\n    }\n    \n    if (search) {\n      countQuery += ' AND (nome LIKE ? OR descricao LIKE ?)';\n      countParams.push(`%${search}%`, `%${search}%`);\n    }\n    \n    const { results: [{ total }] } = await env.DB.prepare(countQuery).bind(...countParams).all();\n    \n    // Criar pagina\u00E7\u00E3o otimizada para mobile\n    const pagination = createMobilePagination(page, optimizedLimit, total, deviceType);\n    \n    // Adaptar response para o dispositivo\n    const adaptedTamanhos = adaptResponseForDevice(tamanhos, deviceType, {\n      removeFields: deviceType === 'mobile' ? ['created_at', 'updated_at'] : [],\n      optimizeNumbers: true\n    });\n    \n    const response = {\n      success: true,\n      data: adaptedTamanhos,\n      pagination,\n      filters: {\n        ativo: ativo ? (ativo === 'true') : null,\n        search\n      },\n      meta: {\n        total,\n        device_optimized: true,\n        cache_strategy: deviceType === 'mobile' ? 'aggressive' : 'moderate'\n      }\n    };\n    \n    // Comprimir response se necess\u00E1rio\n    const finalResponse = await compressResponse(response, request);\n    \n    return addCORSHeaders(new Response(JSON.stringify(finalResponse), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': deviceType === 'mobile' ? 'public, max-age=1800' : 'public, max-age=600',\n        'X-Device-Optimized': 'true'\n      }\n    }));\n    \n  } catch (error) {\n    console.error('Erro ao listar tamanhos:', error);\n    return addCORSHeaders(new Response(JSON.stringify({\n      success: false,\n      error: 'Erro interno do servidor',\n      code: 'INTERNAL_ERROR'\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    }));\n  }\n});\n\n// Buscar tamanho por ID\nrouter.get('/api/v1/tamanhos/:id', \n  validateUrlParams({ id: { required: true, type: 'string' } }),\n  optionalAuth,\n  withCache(300), // Cache por 5 minutos\n  async (request, env) => {\n    try {\n      const { id } = request.params;\n      const deviceType = request.headers.get('X-Device-Type') || 'desktop';\n      \n      const { results } = await env.DB.prepare(\n        'SELECT * FROM tamanhos WHERE id = ?'\n      ).bind(id).all();\n      \n      if (results.length === 0) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Tamanho n\u00E3o encontrado',\n          code: 'NOT_FOUND'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      const tamanho = results[0];\n      \n      // Adaptar response para o dispositivo\n      const adaptedTamanho = adaptResponseForDevice(tamanho, deviceType, {\n        removeFields: deviceType === 'mobile' ? ['created_at', 'updated_at'] : [],\n        optimizeNumbers: true\n      });\n      \n      const response = {\n        success: true,\n        data: adaptedTamanho,\n        meta: {\n          device_optimized: true,\n          cached: true\n        }\n      };\n      \n      const finalResponse = await compressResponse(response, request);\n      \n      return addCORSHeaders(new Response(JSON.stringify(finalResponse), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'public, max-age=300',\n          'X-Device-Optimized': 'true'\n        }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao buscar tamanho:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Criar novo tamanho\nrouter.post('/api/v1/tamanhos',\n  authenticateRequest,\n  validateRequest(tamanhoSchema),\n  async (request, env) => {\n    try {\n      const data = request.validatedData;\n      const now = new Date().toISOString();\n      \n      const { results } = await env.DB.prepare(`\n        INSERT INTO tamanhos (nome, multiplicador, descricao, ativo, ordem, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?)\n        RETURNING *\n      `).bind(\n        data.nome,\n        data.multiplicador,\n        data.descricao || null,\n        data.ativo !== false ? 1 : 0,\n        data.ordem || 0,\n        now,\n        now\n      ).all();\n      \n      const novoTamanho = results[0];\n      \n      // Invalidar cache relacionado\n      await invalidateCache(env, 'tamanhos:*');\n      \n      // Adicionar \u00E0 fila de sincroniza\u00E7\u00E3o\n      await env.DB.prepare(`\n        INSERT INTO sync_queue (table_name, record_id, operation, data, created_at)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(\n        'tamanhos',\n        novoTamanho.id,\n        'create',\n        JSON.stringify(novoTamanho),\n        now\n      ).run();\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        data: novoTamanho,\n        message: 'Tamanho criado com sucesso'\n      }), {\n        status: 201,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao criar tamanho:', error);\n      \n      if (error.message.includes('UNIQUE constraint failed')) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'J\u00E1 existe um tamanho com este nome',\n          code: 'DUPLICATE_NAME'\n        }), {\n          status: 409,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Atualizar tamanho\nrouter.put('/api/v1/tamanhos/:id',\n  validateUrlParams({ id: { required: true, type: 'string' } }),\n  authenticateRequest,\n  validateRequest(tamanhoSchema, false), // Valida\u00E7\u00E3o parcial para updates\n  async (request, env) => {\n    try {\n      const { id } = request.params;\n      const data = request.validatedData;\n      const now = new Date().toISOString();\n      \n      // Verificar se o tamanho existe\n      const { results: existing } = await env.DB.prepare(\n        'SELECT * FROM tamanhos WHERE id = ?'\n      ).bind(id).all();\n      \n      if (existing.length === 0) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Tamanho n\u00E3o encontrado',\n          code: 'NOT_FOUND'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      // Construir query de update dinamicamente\n      const updateFields = [];\n      const updateValues = [];\n      \n      if (data.nome !== undefined) {\n        updateFields.push('nome = ?');\n        updateValues.push(data.nome);\n      }\n      \n      if (data.multiplicador !== undefined) {\n        updateFields.push('multiplicador = ?');\n        updateValues.push(data.multiplicador);\n      }\n      \n      if (data.descricao !== undefined) {\n        updateFields.push('descricao = ?');\n        updateValues.push(data.descricao);\n      }\n      \n      if (data.ativo !== undefined) {\n        updateFields.push('ativo = ?');\n        updateValues.push(data.ativo ? 1 : 0);\n      }\n      \n      if (data.ordem !== undefined) {\n        updateFields.push('ordem = ?');\n        updateValues.push(data.ordem);\n      }\n      \n      updateFields.push('updated_at = ?');\n      updateValues.push(now);\n      updateValues.push(id);\n      \n      const { results } = await env.DB.prepare(`\n        UPDATE tamanhos SET ${updateFields.join(', ')} WHERE id = ?\n        RETURNING *\n      `).bind(...updateValues).all();\n      \n      const tamanhoAtualizado = results[0];\n      \n      // Invalidar cache relacionado\n      await invalidateCache(env, 'tamanhos:*');\n      await invalidateCache(env, `tamanho:${id}`);\n      \n      // Adicionar \u00E0 fila de sincroniza\u00E7\u00E3o\n      await env.DB.prepare(`\n        INSERT INTO sync_queue (table_name, record_id, operation, data, created_at)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(\n        'tamanhos',\n        id,\n        'update',\n        JSON.stringify(tamanhoAtualizado),\n        now\n      ).run();\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        data: tamanhoAtualizado,\n        message: 'Tamanho atualizado com sucesso'\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao atualizar tamanho:', error);\n      \n      if (error.message.includes('UNIQUE constraint failed')) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'J\u00E1 existe um tamanho com este nome',\n          code: 'DUPLICATE_NAME'\n        }), {\n          status: 409,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Remover tamanho (soft delete)\nrouter.delete('/api/v1/tamanhos/:id',\n  validateUrlParams({ id: { required: true, type: 'string' } }),\n  authenticateRequest,\n  async (request, env) => {\n    try {\n      const { id } = request.params;\n      const now = new Date().toISOString();\n      \n      // Verificar se o tamanho existe\n      const { results: existing } = await env.DB.prepare(\n        'SELECT * FROM tamanhos WHERE id = ?'\n      ).bind(id).all();\n      \n      if (existing.length === 0) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Tamanho n\u00E3o encontrado',\n          code: 'NOT_FOUND'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      // Verificar se o tamanho est\u00E1 sendo usado em pedidos\n      const { results: pedidosUsando } = await env.DB.prepare(`\n        SELECT COUNT(*) as count FROM pedido_itens \n        WHERE produto_id IN (\n          SELECT id FROM produtos WHERE 1=1\n        )\n      `).bind().all();\n      \n      // Para simplificar, vamos sempre fazer soft delete para tamanhos\n      // pois eles podem estar referenciados em produtos ou pedidos\n      await env.DB.prepare(`\n        UPDATE tamanhos SET ativo = 0, updated_at = ? WHERE id = ?\n      `).bind(now, id).run();\n      \n      // Invalidar cache relacionado\n      await invalidateCache(env, 'tamanhos:*');\n      await invalidateCache(env, `tamanho:${id}`);\n      \n      // Adicionar \u00E0 fila de sincroniza\u00E7\u00E3o\n      await env.DB.prepare(`\n        INSERT INTO sync_queue (table_name, record_id, operation, data, created_at)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(\n        'tamanhos',\n        id,\n        'update',\n        JSON.stringify({ id, ativo: false }),\n        now\n      ).run();\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        message: 'Tamanho desativado com sucesso',\n        action: 'deactivated'\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao remover tamanho:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Reordenar tamanhos\nrouter.post('/api/v1/tamanhos/reorder',\n  authenticateRequest,\n  validateRequest({\n    tamanhos: { \n      required: true, \n      type: 'array',\n      items: {\n        id: { required: true, type: 'string' },\n        ordem: { required: true, type: 'number', min: 0 }\n      }\n    }\n  }),\n  async (request, env) => {\n    try {\n      const { tamanhos } = request.validatedData;\n      const now = new Date().toISOString();\n      \n      // Atualizar ordem de cada tamanho\n      for (const tamanho of tamanhos) {\n        await env.DB.prepare(`\n          UPDATE tamanhos SET ordem = ?, updated_at = ? WHERE id = ?\n        `).bind(tamanho.ordem, now, tamanho.id).run();\n      }\n      \n      // Invalidar cache relacionado\n      await invalidateCache(env, 'tamanhos:*');\n      \n      // Adicionar \u00E0 fila de sincroniza\u00E7\u00E3o\n      await env.DB.prepare(`\n        INSERT INTO sync_queue (table_name, record_id, operation, data, created_at)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(\n        'tamanhos',\n        'bulk_reorder',\n        'update',\n        JSON.stringify({ tamanhos }),\n        now\n      ).run();\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        message: 'Ordem dos tamanhos atualizada com sucesso',\n        data: { updated_count: tamanhos.length }\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao reordenar tamanhos:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Calcular pre\u00E7o com multiplicador\nrouter.post('/api/v1/tamanhos/calcular-preco',\n  optionalAuth,\n  validateRequest({\n    preco_base: { required: true, type: 'number', min: 0 },\n    tamanho_id: { required: true, type: 'string' }\n  }),\n  async (request, env) => {\n    try {\n      const { preco_base, tamanho_id } = request.validatedData;\n      \n      const { results } = await env.DB.prepare(\n        'SELECT multiplicador FROM tamanhos WHERE id = ? AND ativo = 1'\n      ).bind(tamanho_id).all();\n      \n      if (results.length === 0) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Tamanho n\u00E3o encontrado ou inativo',\n          code: 'NOT_FOUND'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      const { multiplicador } = results[0];\n      const preco_final = preco_base * multiplicador;\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        data: {\n          preco_base,\n          multiplicador,\n          preco_final: Math.round(preco_final * 100) / 100, // Arredondar para 2 casas decimais\n          economia: preco_base - preco_final\n        }\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao calcular pre\u00E7o:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\nexport default router;", "import { Router } from 'itty-router';\nimport { validateRequest, validateUrlParams } from '../middleware/validation.js';\nimport { authenticateRequest, optionalAuth } from '../middleware/auth.js';\nimport { withCache, generateCacheKey, invalidateCache } from '../utils/cache.js';\nimport { addCORSHeaders } from '../utils/cors.js';\nimport { \n  optimizeForMobile, \n  createMobilePagination, \n  compressResponse,\n  adaptResponseForDevice \n} from '../utils/mobile-optimization.js';\n\nconst router = Router();\n\n// Schema de valida\u00E7\u00E3o para pedidos\nconst pedidoSchema = {\n  cliente_nome: { required: true, type: 'string', maxLength: 100 },\n  cliente_telefone: { required: true, type: 'string', maxLength: 20 },\n  cliente_endereco: { type: 'string', maxLength: 500 },\n  tipo_entrega: { required: true, type: 'enum', values: ['balcao', 'entrega'] },\n  forma_pagamento: { required: true, type: 'enum', values: ['dinheiro', 'cartao', 'pix'] },\n  observacoes: { type: 'string', maxLength: 1000 },\n  itens: { \n    required: true, \n    type: 'array', \n    minItems: 1,\n    items: {\n      produto_id: { required: true, type: 'string' },\n      quantidade: { required: true, type: 'number', min: 1 },\n      preco_unitario: { required: true, type: 'number', min: 0 },\n      observacoes: { type: 'string', maxLength: 200 },\n      sabores: {\n        type: 'array',\n        items: {\n          sabor_id: { required: true, type: 'string' },\n          preco_adicional: { type: 'number', min: 0, default: 0 }\n        }\n      }\n    }\n  }\n};\n\n// Listar pedidos com otimiza\u00E7\u00F5es para mobile\nrouter.get('/api/v1/pedidos', optionalAuth, async (request, env) => {\n  try {\n    const url = new URL(request.url);\n    const page = parseInt(url.searchParams.get('page')) || 1;\n    const limit = parseInt(url.searchParams.get('limit')) || 20;\n    const status = url.searchParams.get('status');\n    const tipo_entrega = url.searchParams.get('tipo_entrega');\n    const forma_pagamento = url.searchParams.get('forma_pagamento');\n    const data_inicio = url.searchParams.get('data_inicio');\n    const data_fim = url.searchParams.get('data_fim');\n    const search = url.searchParams.get('search');\n    const deviceType = request.headers.get('X-Device-Type') || 'desktop';\n    \n    // Otimizar limite baseado no dispositivo\n    const optimizedLimit = optimizeForMobile(limit, deviceType);\n    const offset = (page - 1) * optimizedLimit;\n    \n    // Construir query com filtros\n    let query = `\n      SELECT p.*, \n             COUNT(pi.id) as total_itens,\n             SUM(pi.quantidade * pi.preco_unitario) as valor_itens\n      FROM pedidos p\n      LEFT JOIN pedido_itens pi ON p.id = pi.pedido_id\n      WHERE 1=1\n    `;\n    const params = [];\n    \n    if (status) {\n      query += ' AND p.status = ?';\n      params.push(status);\n    }\n    \n    if (tipo_entrega) {\n      query += ' AND p.tipo_entrega = ?';\n      params.push(tipo_entrega);\n    }\n    \n    if (forma_pagamento) {\n      query += ' AND p.forma_pagamento = ?';\n      params.push(forma_pagamento);\n    }\n    \n    if (data_inicio) {\n      query += ' AND DATE(p.created_at) >= ?';\n      params.push(data_inicio);\n    }\n    \n    if (data_fim) {\n      query += ' AND DATE(p.created_at) <= ?';\n      params.push(data_fim);\n    }\n    \n    if (search) {\n      query += ' AND (p.cliente_nome LIKE ? OR p.cliente_telefone LIKE ? OR p.id LIKE ?)';\n      params.push(`%${search}%`, `%${search}%`, `%${search}%`);\n    }\n    \n    // Adicionar GROUP BY, ordena\u00E7\u00E3o e pagina\u00E7\u00E3o\n    query += ' GROUP BY p.id ORDER BY p.created_at DESC LIMIT ? OFFSET ?';\n    params.push(optimizedLimit, offset);\n    \n    // Executar query principal\n    const { results: pedidos } = await env.DB.prepare(query).bind(...params).all();\n    \n    // Query para contar total\n    let countQuery = 'SELECT COUNT(DISTINCT p.id) as total FROM pedidos p WHERE 1=1';\n    const countParams = [];\n    \n    if (status) {\n      countQuery += ' AND p.status = ?';\n      countParams.push(status);\n    }\n    \n    if (tipo_entrega) {\n      countQuery += ' AND p.tipo_entrega = ?';\n      countParams.push(tipo_entrega);\n    }\n    \n    if (forma_pagamento) {\n      countQuery += ' AND p.forma_pagamento = ?';\n      countParams.push(forma_pagamento);\n    }\n    \n    if (data_inicio) {\n      countQuery += ' AND DATE(p.created_at) >= ?';\n      countParams.push(data_inicio);\n    }\n    \n    if (data_fim) {\n      countQuery += ' AND DATE(p.created_at) <= ?';\n      countParams.push(data_fim);\n    }\n    \n    if (search) {\n      countQuery += ' AND (p.cliente_nome LIKE ? OR p.cliente_telefone LIKE ? OR p.id LIKE ?)';\n      countParams.push(`%${search}%`, `%${search}%`, `%${search}%`);\n    }\n    \n    const { results: [{ total }] } = await env.DB.prepare(countQuery).bind(...countParams).all();\n    \n    // Criar pagina\u00E7\u00E3o otimizada para mobile\n    const pagination = createMobilePagination(page, optimizedLimit, total, deviceType);\n    \n    // Adaptar response para o dispositivo\n    const adaptedPedidos = adaptResponseForDevice(pedidos, deviceType, {\n      removeFields: deviceType === 'mobile' ? ['updated_at'] : [],\n      optimizeNumbers: true\n    });\n    \n    const response = {\n      success: true,\n      data: adaptedPedidos,\n      pagination,\n      filters: {\n        status,\n        tipo_entrega,\n        forma_pagamento,\n        data_inicio,\n        data_fim,\n        search\n      },\n      meta: {\n        total,\n        device_optimized: true,\n        cache_strategy: deviceType === 'mobile' ? 'moderate' : 'light'\n      }\n    };\n    \n    // Comprimir response se necess\u00E1rio\n    const finalResponse = await compressResponse(response, request);\n    \n    return addCORSHeaders(new Response(JSON.stringify(finalResponse), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': deviceType === 'mobile' ? 'public, max-age=300' : 'public, max-age=120',\n        'X-Device-Optimized': 'true'\n      }\n    }));\n    \n  } catch (error) {\n    console.error('Erro ao listar pedidos:', error);\n    return addCORSHeaders(new Response(JSON.stringify({\n      success: false,\n      error: 'Erro interno do servidor',\n      code: 'INTERNAL_ERROR'\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    }));\n  }\n});\n\n// Buscar pedido por ID com detalhes completos\nrouter.get('/api/v1/pedidos/:id', \n  validateUrlParams({ id: { required: true, type: 'string' } }),\n  optionalAuth,\n  withCache(180), // Cache por 3 minutos\n  async (request, env) => {\n    try {\n      const { id } = request.params;\n      const deviceType = request.headers.get('X-Device-Type') || 'desktop';\n      \n      // Buscar pedido\n      const { results: pedidoResults } = await env.DB.prepare(\n        'SELECT * FROM pedidos WHERE id = ?'\n      ).bind(id).all();\n      \n      if (pedidoResults.length === 0) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Pedido n\u00E3o encontrado',\n          code: 'NOT_FOUND'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      const pedido = pedidoResults[0];\n      \n      // Buscar itens do pedido com produtos\n      const { results: itens } = await env.DB.prepare(`\n        SELECT \n          pi.*,\n          p.nome as produto_nome,\n          p.categoria as produto_categoria,\n          p.imagem as produto_imagem\n        FROM pedido_itens pi\n        JOIN produtos p ON pi.produto_id = p.id\n        WHERE pi.pedido_id = ?\n        ORDER BY pi.created_at ASC\n      `).bind(id).all();\n      \n      // Buscar sabores de cada item\n      for (let item of itens) {\n        const { results: sabores } = await env.DB.prepare(`\n          SELECT \n            isab.*,\n            s.nome as sabor_nome,\n            s.categoria as sabor_categoria\n          FROM item_sabores isab\n          JOIN sabores s ON isab.sabor_id = s.id\n          WHERE isab.item_id = ?\n          ORDER BY s.nome ASC\n        `).bind(item.id).all();\n        \n        item.sabores = sabores;\n      }\n      \n      pedido.itens = itens;\n      \n      // Adaptar response para o dispositivo\n      const adaptedPedido = adaptResponseForDevice(pedido, deviceType, {\n        removeFields: deviceType === 'mobile' ? ['updated_at'] : [],\n        optimizeNumbers: true\n      });\n      \n      const response = {\n        success: true,\n        data: adaptedPedido,\n        meta: {\n          device_optimized: true,\n          cached: true,\n          total_itens: itens.length\n        }\n      };\n      \n      const finalResponse = await compressResponse(response, request);\n      \n      return addCORSHeaders(new Response(JSON.stringify(finalResponse), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'public, max-age=180',\n          'X-Device-Optimized': 'true'\n        }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao buscar pedido:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Criar novo pedido\nrouter.post('/api/v1/pedidos',\n  authenticateRequest,\n  validateRequest(pedidoSchema),\n  async (request, env) => {\n    try {\n      const data = request.validatedData;\n      const now = new Date().toISOString();\n      \n      // Calcular total do pedido\n      let total_pedido = 0;\n      for (const item of data.itens) {\n        let total_item = item.quantidade * item.preco_unitario;\n        \n        // Adicionar pre\u00E7o dos sabores\n        if (item.sabores) {\n          for (const sabor of item.sabores) {\n            total_item += sabor.preco_adicional || 0;\n          }\n        }\n        \n        total_pedido += total_item;\n      }\n      \n      // Criar pedido\n      const { results: pedidoResults } = await env.DB.prepare(`\n        INSERT INTO pedidos (\n          cliente_nome, cliente_telefone, cliente_endereco,\n          tipo_entrega, forma_pagamento, observacoes,\n          total, status, created_at, updated_at\n        )\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        RETURNING *\n      `).bind(\n        data.cliente_nome,\n        data.cliente_telefone,\n        data.cliente_endereco || null,\n        data.tipo_entrega,\n        data.forma_pagamento,\n        data.observacoes || null,\n        total_pedido,\n        'pendente',\n        now,\n        now\n      ).all();\n      \n      const novoPedido = pedidoResults[0];\n      \n      // Criar itens do pedido\n      const itensCompletos = [];\n      for (const item of data.itens) {\n        const { results: itemResults } = await env.DB.prepare(`\n          INSERT INTO pedido_itens (\n            pedido_id, produto_id, quantidade, preco_unitario, observacoes, created_at\n          )\n          VALUES (?, ?, ?, ?, ?, ?)\n          RETURNING *\n        `).bind(\n          novoPedido.id,\n          item.produto_id,\n          item.quantidade,\n          item.preco_unitario,\n          item.observacoes || null,\n          now\n        ).all();\n        \n        const novoItem = itemResults[0];\n        \n        // Adicionar sabores do item\n        if (item.sabores && item.sabores.length > 0) {\n          const saboresCompletos = [];\n          for (const sabor of item.sabores) {\n            await env.DB.prepare(`\n              INSERT INTO item_sabores (item_id, sabor_id, preco_adicional, created_at)\n              VALUES (?, ?, ?, ?)\n            `).bind(\n              novoItem.id,\n              sabor.sabor_id,\n              sabor.preco_adicional || 0,\n              now\n            ).run();\n            \n            saboresCompletos.push({\n              sabor_id: sabor.sabor_id,\n              preco_adicional: sabor.preco_adicional || 0\n            });\n          }\n          novoItem.sabores = saboresCompletos;\n        }\n        \n        itensCompletos.push(novoItem);\n      }\n      \n      novoPedido.itens = itensCompletos;\n      \n      // Invalidar cache relacionado\n      await invalidateCache(env, 'pedidos:*');\n      \n      // Adicionar \u00E0 fila de sincroniza\u00E7\u00E3o\n      await env.DB.prepare(`\n        INSERT INTO sync_queue (table_name, record_id, operation, data, created_at)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(\n        'pedidos',\n        novoPedido.id,\n        'create',\n        JSON.stringify(novoPedido),\n        now\n      ).run();\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        data: novoPedido,\n        message: 'Pedido criado com sucesso'\n      }), {\n        status: 201,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao criar pedido:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Atualizar status do pedido\nrouter.put('/api/v1/pedidos/:id/status',\n  validateUrlParams({ id: { required: true, type: 'string' } }),\n  authenticateRequest,\n  validateRequest({\n    status: { \n      required: true, \n      type: 'enum', \n      values: ['pendente', 'preparando', 'pronto', 'entregue', 'cancelado'] \n    }\n  }),\n  async (request, env) => {\n    try {\n      const { id } = request.params;\n      const { status } = request.validatedData;\n      const now = new Date().toISOString();\n      \n      // Verificar se o pedido existe\n      const { results: existing } = await env.DB.prepare(\n        'SELECT * FROM pedidos WHERE id = ?'\n      ).bind(id).all();\n      \n      if (existing.length === 0) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Pedido n\u00E3o encontrado',\n          code: 'NOT_FOUND'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      // Atualizar status\n      const { results } = await env.DB.prepare(`\n        UPDATE pedidos SET status = ?, updated_at = ? WHERE id = ?\n        RETURNING *\n      `).bind(status, now, id).all();\n      \n      const pedidoAtualizado = results[0];\n      \n      // Invalidar cache relacionado\n      await invalidateCache(env, 'pedidos:*');\n      await invalidateCache(env, `pedido:${id}`);\n      \n      // Adicionar \u00E0 fila de sincroniza\u00E7\u00E3o\n      await env.DB.prepare(`\n        INSERT INTO sync_queue (table_name, record_id, operation, data, created_at)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(\n        'pedidos',\n        id,\n        'update',\n        JSON.stringify({ id, status, updated_at: now }),\n        now\n      ).run();\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        data: pedidoAtualizado,\n        message: `Status do pedido atualizado para: ${status}`\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao atualizar status do pedido:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Cancelar pedido\nrouter.delete('/api/v1/pedidos/:id',\n  validateUrlParams({ id: { required: true, type: 'string' } }),\n  authenticateRequest,\n  async (request, env) => {\n    try {\n      const { id } = request.params;\n      const now = new Date().toISOString();\n      \n      // Verificar se o pedido existe e pode ser cancelado\n      const { results: existing } = await env.DB.prepare(\n        'SELECT * FROM pedidos WHERE id = ?'\n      ).bind(id).all();\n      \n      if (existing.length === 0) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Pedido n\u00E3o encontrado',\n          code: 'NOT_FOUND'\n        }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      const pedido = existing[0];\n      \n      if (['entregue', 'cancelado'].includes(pedido.status)) {\n        return addCORSHeaders(new Response(JSON.stringify({\n          success: false,\n          error: 'Pedido n\u00E3o pode ser cancelado',\n          code: 'CANNOT_CANCEL',\n          current_status: pedido.status\n        }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        }));\n      }\n      \n      // Cancelar pedido\n      const { results } = await env.DB.prepare(`\n        UPDATE pedidos SET status = 'cancelado', updated_at = ? WHERE id = ?\n        RETURNING *\n      `).bind(now, id).all();\n      \n      const pedidoCancelado = results[0];\n      \n      // Invalidar cache relacionado\n      await invalidateCache(env, 'pedidos:*');\n      await invalidateCache(env, `pedido:${id}`);\n      \n      // Adicionar \u00E0 fila de sincroniza\u00E7\u00E3o\n      await env.DB.prepare(`\n        INSERT INTO sync_queue (table_name, record_id, operation, data, created_at)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(\n        'pedidos',\n        id,\n        'update',\n        JSON.stringify({ id, status: 'cancelado', updated_at: now }),\n        now\n      ).run();\n      \n      return addCORSHeaders(new Response(JSON.stringify({\n        success: true,\n        data: pedidoCancelado,\n        message: 'Pedido cancelado com sucesso'\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao cancelar pedido:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\n// Estat\u00EDsticas de pedidos\nrouter.get('/api/v1/pedidos/stats', \n  authenticateRequest,\n  withCache(300), // Cache por 5 minutos\n  async (request, env) => {\n    try {\n      const url = new URL(request.url);\n      const periodo = url.searchParams.get('periodo') || 'hoje'; // hoje, semana, mes, ano\n      \n      let dataInicio;\n      const agora = new Date();\n      \n      switch (periodo) {\n        case 'hoje':\n          dataInicio = new Date(agora.getFullYear(), agora.getMonth(), agora.getDate());\n          break;\n        case 'semana':\n          dataInicio = new Date(agora.getTime() - 7 * 24 * 60 * 60 * 1000);\n          break;\n        case 'mes':\n          dataInicio = new Date(agora.getFullYear(), agora.getMonth(), 1);\n          break;\n        case 'ano':\n          dataInicio = new Date(agora.getFullYear(), 0, 1);\n          break;\n        default:\n          dataInicio = new Date(agora.getFullYear(), agora.getMonth(), agora.getDate());\n      }\n      \n      // Estat\u00EDsticas gerais\n      const { results: stats } = await env.DB.prepare(`\n        SELECT \n          COUNT(*) as total_pedidos,\n          SUM(CASE WHEN status = 'pendente' THEN 1 ELSE 0 END) as pendentes,\n          SUM(CASE WHEN status = 'preparando' THEN 1 ELSE 0 END) as preparando,\n          SUM(CASE WHEN status = 'pronto' THEN 1 ELSE 0 END) as prontos,\n          SUM(CASE WHEN status = 'entregue' THEN 1 ELSE 0 END) as entregues,\n          SUM(CASE WHEN status = 'cancelado' THEN 1 ELSE 0 END) as cancelados,\n          SUM(total) as faturamento_total,\n          AVG(total) as ticket_medio\n        FROM pedidos \n        WHERE created_at >= ?\n      `).bind(dataInicio.toISOString()).all();\n      \n      // Pedidos por forma de pagamento\n      const { results: pagamentos } = await env.DB.prepare(`\n        SELECT \n          forma_pagamento,\n          COUNT(*) as quantidade,\n          SUM(total) as valor_total\n        FROM pedidos \n        WHERE created_at >= ?\n        GROUP BY forma_pagamento\n      `).bind(dataInicio.toISOString()).all();\n      \n      // Pedidos por tipo de entrega\n      const { results: entregas } = await env.DB.prepare(`\n        SELECT \n          tipo_entrega,\n          COUNT(*) as quantidade,\n          SUM(total) as valor_total\n        FROM pedidos \n        WHERE created_at >= ?\n        GROUP BY tipo_entrega\n      `).bind(dataInicio.toISOString()).all();\n      \n      const response = {\n        success: true,\n        data: {\n          periodo,\n          data_inicio: dataInicio.toISOString(),\n          resumo: stats[0],\n          por_pagamento: pagamentos,\n          por_entrega: entregas\n        },\n        meta: {\n          cached: true,\n          generated_at: new Date().toISOString()\n        }\n      };\n      \n      return addCORSHeaders(new Response(JSON.stringify(response), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'public, max-age=300'\n        }\n      }));\n      \n    } catch (error) {\n      console.error('Erro ao buscar estat\u00EDsticas:', error);\n      return addCORSHeaders(new Response(JSON.stringify({\n        success: false,\n        error: 'Erro interno do servidor',\n        code: 'INTERNAL_ERROR'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n  }\n);\n\nexport default router;", "// Sistema de sincroniza\u00E7\u00E3o offline para dispositivos m\u00F3veis\n\nimport { Router } from 'itty-router';\nimport { corsHeaders } from '../utils/cors';\nimport { optionalAuth } from '../middleware/auth';\nimport { validateRequest, schemas } from '../middleware/validation';\n\nconst router = Router();\n\n/**\n * Endpoint para sincroniza\u00E7\u00E3o de dados offline\n * Permite que dispositivos m\u00F3veis enviem dados coletados offline\n */\nrouter.post('/api/v1/sync/upload', optionalAuth, async (request, env) => {\n  try {\n    const { operations } = await request.json();\n    \n    if (!Array.isArray(operations)) {\n      return new Response(JSON.stringify({\n        error: 'Operations deve ser um array',\n        code: 'INVALID_OPERATIONS'\n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    const results = [];\n    const errors = [];\n    \n    // Processar opera\u00E7\u00F5es em lote\n    for (const operation of operations) {\n      try {\n        const result = await processOperation(env.DB, operation);\n        results.push({\n          id: operation.id,\n          status: 'success',\n          result\n        });\n      } catch (error) {\n        errors.push({\n          id: operation.id,\n          status: 'error',\n          error: error.message\n        });\n      }\n    }\n    \n    return new Response(JSON.stringify({\n      success: true,\n      processed: results.length,\n      errors: errors.length,\n      results,\n      errorDetails: errors\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: 'Erro na sincroniza\u00E7\u00E3o',\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n});\n\n/**\n * Endpoint para download de dados atualizados\n * Permite que dispositivos m\u00F3veis baixem dados mais recentes\n */\nrouter.get('/api/v1/sync/download', optionalAuth, async (request, env) => {\n  try {\n    const url = new URL(request.url);\n    const lastSync = url.searchParams.get('last_sync');\n    const tables = url.searchParams.get('tables')?.split(',') || ['produtos', 'sabores', 'tamanhos'];\n    \n    const syncData = {};\n    const currentTimestamp = new Date().toISOString();\n    \n    // Buscar dados atualizados desde a \u00FAltima sincroniza\u00E7\u00E3o\n    for (const table of tables) {\n      let query = `SELECT * FROM ${table}`;\n      let params = [];\n      \n      if (lastSync) {\n        query += ` WHERE updated_at > ?`;\n        params.push(lastSync);\n      }\n      \n      query += ` ORDER BY updated_at DESC LIMIT 1000`; // Limite para mobile\n      \n      const stmt = env.DB.prepare(query);\n      if (params.length > 0) {\n        stmt.bind(...params);\n      }\n      \n      const results = await stmt.all();\n      syncData[table] = results.results || [];\n    }\n    \n    // Buscar dados deletados (se houver tabela de log de dele\u00E7\u00F5es)\n    const deletedData = {};\n    // Implementar l\u00F3gica de soft delete se necess\u00E1rio\n    \n    return new Response(JSON.stringify({\n      success: true,\n      timestamp: currentTimestamp,\n      data: syncData,\n      deleted: deletedData,\n      has_more: false // Implementar pagina\u00E7\u00E3o se necess\u00E1rio\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache',\n        ...corsHeaders\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: 'Erro no download de sincroniza\u00E7\u00E3o',\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n});\n\n/**\n * Endpoint para verificar status de sincroniza\u00E7\u00E3o\n */\nrouter.get('/api/v1/sync/status', async (request, env) => {\n  try {\n    const stats = await Promise.all([\n      env.DB.prepare('SELECT COUNT(*) as total FROM produtos WHERE ativo = 1').first(),\n      env.DB.prepare('SELECT COUNT(*) as total FROM sabores WHERE ativo = 1').first(),\n      env.DB.prepare('SELECT COUNT(*) as total FROM tamanhos WHERE ativo = 1').first(),\n      env.DB.prepare('SELECT COUNT(*) as total FROM pedidos WHERE DATE(created_at) = DATE(\"now\")').first(),\n      env.DB.prepare('SELECT MAX(updated_at) as last_update FROM produtos').first()\n    ]);\n    \n    return new Response(JSON.stringify({\n      success: true,\n      stats: {\n        produtos_ativos: stats[0].total,\n        sabores_ativos: stats[1].total,\n        tamanhos_ativos: stats[2].total,\n        pedidos_hoje: stats[3].total,\n        last_update: stats[4].last_update\n      },\n      server_time: new Date().toISOString()\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'max-age=60', // Cache por 1 minuto\n        ...corsHeaders\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: 'Erro ao verificar status',\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n});\n\n/**\n * Endpoint para resolver conflitos de sincroniza\u00E7\u00E3o\n */\nrouter.post('/api/v1/sync/resolve-conflict', optionalAuth, async (request, env) => {\n  try {\n    const { table, id, resolution, data } = await request.json();\n    \n    // Validar par\u00E2metros\n    if (!table || !id || !resolution) {\n      return new Response(JSON.stringify({\n        error: 'Par\u00E2metros obrigat\u00F3rios: table, id, resolution',\n        code: 'MISSING_PARAMS'\n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n    \n    let result;\n    \n    switch (resolution) {\n      case 'server_wins':\n        // Manter dados do servidor, retornar dados atuais\n        result = await env.DB.prepare(`SELECT * FROM ${table} WHERE id = ?`)\n          .bind(id).first();\n        break;\n        \n      case 'client_wins':\n        // Usar dados do cliente\n        result = await updateRecord(env.DB, table, id, data);\n        break;\n        \n      case 'merge':\n        // Implementar l\u00F3gica de merge espec\u00EDfica por tabela\n        result = await mergeRecord(env.DB, table, id, data);\n        break;\n        \n      default:\n        throw new Error('Resolu\u00E7\u00E3o de conflito inv\u00E1lida');\n    }\n    \n    return new Response(JSON.stringify({\n      success: true,\n      resolution,\n      data: result\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      error: 'Erro na resolu\u00E7\u00E3o de conflito',\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n});\n\n/**\n * Processa uma opera\u00E7\u00E3o de sincroniza\u00E7\u00E3o\n */\nasync function processOperation(db, operation) {\n  const { type, table, data, id } = operation;\n  \n  switch (type) {\n    case 'CREATE':\n      return await createRecord(db, table, data);\n      \n    case 'UPDATE':\n      return await updateRecord(db, table, id, data);\n      \n    case 'DELETE':\n      return await deleteRecord(db, table, id);\n      \n    default:\n      throw new Error(`Tipo de opera\u00E7\u00E3o inv\u00E1lido: ${type}`);\n  }\n}\n\n/**\n * Cria um novo registro\n */\nasync function createRecord(db, table, data) {\n  const fields = Object.keys(data);\n  const values = Object.values(data);\n  const placeholders = fields.map(() => '?').join(', ');\n  \n  const query = `\n    INSERT INTO ${table} (${fields.join(', ')})\n    VALUES (${placeholders})\n  `;\n  \n  const result = await db.prepare(query).bind(...values).run();\n  \n  if (result.success) {\n    // Retornar o registro criado\n    return await db.prepare(`SELECT * FROM ${table} WHERE id = ?`)\n      .bind(result.meta.last_row_id).first();\n  }\n  \n  throw new Error('Falha ao criar registro');\n}\n\n/**\n * Atualiza um registro existente\n */\nasync function updateRecord(db, table, id, data) {\n  const fields = Object.keys(data);\n  const values = Object.values(data);\n  const setClause = fields.map(field => `${field} = ?`).join(', ');\n  \n  const query = `\n    UPDATE ${table} \n    SET ${setClause}, updated_at = CURRENT_TIMESTAMP\n    WHERE id = ?\n  `;\n  \n  const result = await db.prepare(query).bind(...values, id).run();\n  \n  if (result.success && result.changes > 0) {\n    // Retornar o registro atualizado\n    return await db.prepare(`SELECT * FROM ${table} WHERE id = ?`)\n      .bind(id).first();\n  }\n  \n  throw new Error('Registro n\u00E3o encontrado ou n\u00E3o atualizado');\n}\n\n/**\n * Remove um registro\n */\nasync function deleteRecord(db, table, id) {\n  const result = await db.prepare(`DELETE FROM ${table} WHERE id = ?`)\n    .bind(id).run();\n  \n  if (result.success && result.changes > 0) {\n    return { deleted: true, id };\n  }\n  \n  throw new Error('Registro n\u00E3o encontrado ou n\u00E3o removido');\n}\n\n/**\n * Faz merge de dados (implementa\u00E7\u00E3o b\u00E1sica)\n */\nasync function mergeRecord(db, table, id, clientData) {\n  // Buscar dados atuais do servidor\n  const serverData = await db.prepare(`SELECT * FROM ${table} WHERE id = ?`)\n    .bind(id).first();\n  \n  if (!serverData) {\n    throw new Error('Registro n\u00E3o encontrado no servidor');\n  }\n  \n  // Merge simples: priorizar dados mais recentes\n  const merged = { ...serverData };\n  \n  for (const [key, value] of Object.entries(clientData)) {\n    if (key !== 'id' && key !== 'created_at' && key !== 'updated_at') {\n      merged[key] = value;\n    }\n  }\n  \n  // Atualizar com dados merged\n  return await updateRecord(db, table, id, merged);\n}\n\nexport default router;", "// Cloudflare Worker principal - Otimizado para dispositivos m\u00F3veis\nimport { Router } from 'itty-router';\nimport { handleCORS, addCORSHeaders } from './utils/cors.js';\nimport { rateLimitMiddleware } from './middleware/auth.js';\nimport { validateRequestSize } from './middleware/validation.js';\nimport { withCache, cleanExpiredCache } from './utils/cache.js';\nimport { compressResponse } from './utils/mobile-optimization.js';\n\n// Importar rotas\nimport produtosRouter from './routes/produtos.js';\nimport saboresRouter from './routes/sabores.js';\nimport tamanhosRouter from './routes/tamanhos.js';\nimport pedidosRouter from './routes/pedidos.js';\nimport syncRouter from './routes/sync.js';\n\nconst router = Router();\n\n// Middleware global para CORS\nrouter.all('*', handleCORS);\n\n// Rota de health check\nrouter.get('/health', () => {\n  return new Response(JSON.stringify({ \n    status: 'ok', \n    timestamp: new Date().toISOString(),\n    version: '1.0.0'\n  }), {\n    headers: {\n      'Content-Type': 'application/json',\n      ...corsHeaders\n    }\n  });\n});\n\n// Registrar todas as rotas\nrouter.all('*', produtosRouter.handle);\nrouter.all('*', saboresRouter.handle);\nrouter.all('*', tamanhosRouter.handle);\nrouter.all('*', pedidosRouter.handle);\nrouter.all('*', syncRouter.handle);\n\n// Rota para limpeza de cache (administrativa)\nrouter.post('/api/v1/admin/clear-cache', authenticateRequest, async (request, env) => {\n  try {\n    await env.DB.prepare('DELETE FROM cache_dados WHERE expires_at < ?')\n      .bind(new Date().toISOString())\n      .run();\n    \n    return new Response(JSON.stringify({ \n      success: true, \n      message: 'Cache limpo com sucesso' \n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  } catch (error) {\n    return new Response(JSON.stringify({ \n      error: 'Erro ao limpar cache',\n      details: error.message \n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n});\n\n// Rota para estat\u00EDsticas (otimizada para mobile)\nrouter.get('/api/v1/stats', async (request, env) => {\n  try {\n    // Verificar cache primeiro\n    const cacheKey = 'stats_dashboard';\n    const cached = await getCachedResponse(env.DB, cacheKey);\n    if (cached) {\n      return new Response(cached, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders,\n          'X-Cache': 'HIT'\n        }\n      });\n    }\n\n    // Buscar dados do banco\n    const [produtos, pedidosHoje, pedidosPendentes] = await Promise.all([\n      env.DB.prepare('SELECT COUNT(*) as total FROM produtos WHERE ativo = 1').first(),\n      env.DB.prepare(`\n        SELECT COUNT(*) as total \n        FROM pedidos \n        WHERE DATE(created_at) = DATE('now')\n      `).first(),\n      env.DB.prepare('SELECT COUNT(*) as total FROM pedidos WHERE status = ?')\n        .bind('Pendente').first()\n    ]);\n\n    const stats = {\n      produtos_ativos: produtos.total,\n      pedidos_hoje: pedidosHoje.total,\n      pedidos_pendentes: pedidosPendentes.total,\n      timestamp: new Date().toISOString()\n    };\n\n    // Cache por 5 minutos\n    await cacheResponse(env.DB, cacheKey, JSON.stringify(stats), 300);\n\n    return new Response(JSON.stringify(stats), {\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders,\n        'X-Cache': 'MISS'\n      }\n    });\n  } catch (error) {\n    return new Response(JSON.stringify({ \n      error: 'Erro ao buscar estat\u00EDsticas',\n      details: error.message \n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        ...corsHeaders\n      }\n    });\n  }\n});\n\n// Handler principal\nexport default {\n  async fetch(request, env, ctx) {\n    try {\n      // Verificar tamanho da requisi\u00E7\u00E3o (limite para mobile)\n      const contentLength = request.headers.get('content-length');\n      if (contentLength && parseInt(contentLength) > 10 * 1024 * 1024) { // 10MB\n        return new Response(JSON.stringify({ \n          error: 'Requisi\u00E7\u00E3o muito grande',\n          max_size: '10MB'\n        }), {\n          status: 413,\n          headers: {\n            'Content-Type': 'application/json',\n            ...corsHeaders\n          }\n        });\n      }\n\n      // Processar requisi\u00E7\u00E3o\n      const response = await router.handle(request, env, ctx);\n      \n      // Adicionar headers de seguran\u00E7a\n      const secureResponse = new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: {\n          ...response.headers,\n          'X-Content-Type-Options': 'nosniff',\n          'X-Frame-Options': 'DENY',\n          'X-XSS-Protection': '1; mode=block',\n          'Referrer-Policy': 'strict-origin-when-cross-origin'\n        }\n      });\n\n      return secureResponse;\n    } catch (error) {\n      console.error('Erro no worker:', error);\n      return new Response(JSON.stringify({ \n        error: 'Erro interno do servidor',\n        timestamp: new Date().toISOString()\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          ...corsHeaders\n        }\n      });\n    }\n  },\n\n  // Handler para tarefas agendadas (limpeza de cache)\n  async scheduled(controller, env, ctx) {\n    try {\n      // Limpar cache expirado\n      await env.DB.prepare('DELETE FROM cache_dados WHERE expires_at < ?')\n        .bind(new Date().toISOString())\n        .run();\n      \n      console.log('Cache expirado limpo com sucesso');\n    } catch (error) {\n      console.error('Erro na limpeza de cache:', error);\n    }\n  }\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"E:\\\\pastelaria_new\\\\src\\\\index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\Ayslan\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\Ayslan\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"E:\\\\pastelaria_new\\\\src\\\\index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"E:\\\\pastelaria_new\\\\.wrangler\\\\tmp\\\\bundle-m30Ttn\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\Ayslan\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"E:\\\\pastelaria_new\\\\.wrangler\\\\tmp\\\\bundle-m30Ttn\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"E:\\\\pastelaria_new\\\\.wrangler\\\\tmp\\\\bundle-m30Ttn\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["t", "r", "o", "e", "n", "corsHeaders", "authenticateRequest", "corsHeaders", "f", "corsHeaders", "cacheResponse", "getCachedResponse", "corsHeaders", "f", "router", "authenticateRequest", "router", "authenticateRequest", "router", "authenticateRequest", "router", "corsHeaders", "router"]
}
